
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.30.2
 * Query Engine version: b8c35d44de987a9691890b3ddf3e2e7effb9bf20
 */
Prisma.prismaVersion = {
  client: "2.30.2",
  engine: "b8c35d44de987a9691890b3ddf3e2e7effb9bf20"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.DopowerupScalarFieldEnum = makeEnum({
  txid: 'txid',
  receiver: 'receiver',
  payer: 'payer',
  cpu_frac: 'cpu_frac',
  net_frac: 'net_frac',
  time: 'time',
  failed: 'failed',
  reversible: 'reversible',
  userId: 'userId'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  telegramId: 'telegramId',
  telegramHandle: 'telegramHandle',
  eosAccount: 'eosAccount',
  discordId: 'discordId',
  discordHandle: 'discordHandle',
  email: 'email'
});

exports.Prisma.CursorScalarFieldEnum = makeEnum({
  searchString: 'searchString',
  cursor: 'cursor',
  lowBlock: 'lowBlock'
});

exports.Prisma.IpblacklistScalarFieldEnum = makeEnum({
  ip: 'ip',
  reason: 'reason'
});

exports.Prisma.BlacklistScalarFieldEnum = makeEnum({
  account: 'account',
  reason: 'reason'
});

exports.Prisma.LogpowerupScalarFieldEnum = makeEnum({
  seq: 'seq',
  txid: 'txid',
  action: 'action',
  cost: 'cost',
  fee: 'fee',
  received_cpu_ms: 'received_cpu_ms',
  received_net_kb: 'received_net_kb',
  receiver: 'receiver',
  payer: 'payer',
  total_billed: 'total_billed',
  blockTime: 'blockTime'
});

exports.Prisma.LogbuyramScalarFieldEnum = makeEnum({
  seq: 'seq',
  txid: 'txid',
  action: 'action',
  cost: 'cost',
  fee: 'fee',
  received_ram_kb: 'received_ram_kb',
  receiver: 'receiver',
  payer: 'payer',
  total_billed: 'total_billed',
  blockTime: 'blockTime'
});

exports.Prisma.TransferScalarFieldEnum = makeEnum({
  seq: 'seq',
  from: 'from',
  to: 'to',
  quantity: 'quantity',
  memo: 'memo',
  symbol: 'symbol',
  txid: 'txid',
  blockTime: 'blockTime'
});

exports.Prisma.StatsScalarFieldEnum = makeEnum({
  id: 'id',
  owners: 'owners',
  totalWatched: 'totalWatched',
  totalDeposited: 'totalDeposited',
  internalEOSBal: 'internalEOSBal',
  eosBal: 'eosBal',
  autopowerups24hr: 'autopowerups24hr',
  autopowerupCost24hr: 'autopowerupCost24hr',
  autobuyram24hr: 'autobuyram24hr',
  autopowerupfees24hr: 'autopowerupfees24hr',
  autobuyramfees24hr: 'autobuyramfees24hr',
  autobuyramCost24hr: 'autobuyramCost24hr',
  registeredUsersTotal: 'registeredUsersTotal',
  activeTgUsers: 'activeTgUsers',
  activeDiscordUsers: 'activeDiscordUsers',
  freePowerups24hr: 'freePowerups24hr',
  freePowerupsCost24hr: 'freePowerupsCost24hr',
  createdAt: 'createdAt',
  rpcErrorStats: 'rpcErrorStats'
});

exports.Prisma.RpcErrorsScalarFieldEnum = makeEnum({
  id: 'id',
  time: 'time',
  endpoint: 'endpoint',
  error: 'error'
});

exports.Prisma.RpcSuccessScalarFieldEnum = makeEnum({
  id: 'id',
  time: 'time',
  endpoint: 'endpoint',
  error: 'error'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});


exports.Prisma.ModelName = makeEnum({
  Dopowerup: 'Dopowerup',
  User: 'User',
  Cursor: 'Cursor',
  ipblacklist: 'ipblacklist',
  blacklist: 'blacklist',
  Logpowerup: 'Logpowerup',
  Logbuyram: 'Logbuyram',
  Transfer: 'Transfer',
  Stats: 'Stats',
  rpcErrors: 'rpcErrors',
  rpcSuccess: 'rpcSuccess'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
