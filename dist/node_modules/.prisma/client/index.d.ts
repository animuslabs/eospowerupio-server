
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Dopowerup
 */

export type Dopowerup = {
  txid: string
  receiver: string
  payer: string
  cpu_frac: number
  net_frac: number
  time: number
  failed: boolean
  reversible: boolean
  userId: string | null
}

/**
 * Model User
 */

export type User = {
  id: string
  telegramId: number | null
  telegramHandle: string | null
  eosAccount: string | null
  discordId: string | null
  discordHandle: string | null
  email: string | null
}

/**
 * Model Cursor
 */

export type Cursor = {
  searchString: string
  cursor: string
  lowBlock: number
}

/**
 * Model ipblacklist
 */

export type ipblacklist = {
  ip: string
  reason: string
}

/**
 * Model blacklist
 */

export type blacklist = {
  account: string
  reason: string
}

/**
 * Model Logpowerup
 */

export type Logpowerup = {
  seq: number
  txid: string
  action: string
  cost: number
  fee: number
  received_cpu_ms: number
  received_net_kb: number
  receiver: string
  payer: string
  total_billed: number
  blockTime: number
}

/**
 * Model Logbuyram
 */

export type Logbuyram = {
  seq: number
  txid: string
  action: string
  cost: number
  fee: number
  received_ram_kb: number
  receiver: string
  payer: string
  total_billed: number
  blockTime: number
}

/**
 * Model Transfer
 */

export type Transfer = {
  seq: number
  from: string
  to: string
  quantity: number
  memo: string
  symbol: string
  txid: string
  blockTime: number
}

/**
 * Model Stats
 */

export type Stats = {
  id: string
  owners: number
  totalWatched: number
  totalDeposited: number
  internalEOSBal: number
  eosBal: number
  autopowerups24hr: number
  autopowerupCost24hr: number
  autobuyram24hr: number
  autopowerupfees24hr: number
  autobuyramfees24hr: number
  autobuyramCost24hr: number
  registeredUsersTotal: number
  activeTgUsers: number
  activeDiscordUsers: number
  freePowerups24hr: number
  freePowerupsCost24hr: number
  createdAt: number
  rpcErrorStats: string
}

/**
 * Model rpcErrors
 */

export type rpcErrors = {
  id: string
  time: number
  endpoint: string
  error: string
}

/**
 * Model rpcSuccess
 */

export type rpcSuccess = {
  id: string
  time: number
  endpoint: string
  error: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Dopowerups
 * const dopowerups = await prisma.dopowerup.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Dopowerups
   * const dopowerups = await prisma.dopowerup.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.$executeRaw``, values will be escaped automatically
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.$executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.$queryRaw``, values will be escaped automatically
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.$queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.dopowerup`: Exposes CRUD operations for the **Dopowerup** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Dopowerups
    * const dopowerups = await prisma.dopowerup.findMany()
    * ```
    */
  get dopowerup(): Prisma.DopowerupDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.cursor`: Exposes CRUD operations for the **Cursor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cursors
    * const cursors = await prisma.cursor.findMany()
    * ```
    */
  get cursor(): Prisma.CursorDelegate<GlobalReject>;

  /**
   * `prisma.ipblacklist`: Exposes CRUD operations for the **ipblacklist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ipblacklists
    * const ipblacklists = await prisma.ipblacklist.findMany()
    * ```
    */
  get ipblacklist(): Prisma.ipblacklistDelegate<GlobalReject>;

  /**
   * `prisma.blacklist`: Exposes CRUD operations for the **blacklist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Blacklists
    * const blacklists = await prisma.blacklist.findMany()
    * ```
    */
  get blacklist(): Prisma.blacklistDelegate<GlobalReject>;

  /**
   * `prisma.logpowerup`: Exposes CRUD operations for the **Logpowerup** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Logpowerups
    * const logpowerups = await prisma.logpowerup.findMany()
    * ```
    */
  get logpowerup(): Prisma.LogpowerupDelegate<GlobalReject>;

  /**
   * `prisma.logbuyram`: Exposes CRUD operations for the **Logbuyram** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Logbuyrams
    * const logbuyrams = await prisma.logbuyram.findMany()
    * ```
    */
  get logbuyram(): Prisma.LogbuyramDelegate<GlobalReject>;

  /**
   * `prisma.transfer`: Exposes CRUD operations for the **Transfer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transfers
    * const transfers = await prisma.transfer.findMany()
    * ```
    */
  get transfer(): Prisma.TransferDelegate<GlobalReject>;

  /**
   * `prisma.stats`: Exposes CRUD operations for the **Stats** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stats
    * const stats = await prisma.stats.findMany()
    * ```
    */
  get stats(): Prisma.StatsDelegate<GlobalReject>;

  /**
   * `prisma.rpcErrors`: Exposes CRUD operations for the **rpcErrors** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RpcErrors
    * const rpcErrors = await prisma.rpcErrors.findMany()
    * ```
    */
  get rpcErrors(): Prisma.rpcErrorsDelegate<GlobalReject>;

  /**
   * `prisma.rpcSuccess`: Exposes CRUD operations for the **rpcSuccess** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RpcSuccesses
    * const rpcSuccesses = await prisma.rpcSuccess.findMany()
    * ```
    */
  get rpcSuccess(): Prisma.rpcSuccessDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.30.2
   * Query Engine version: b8c35d44de987a9691890b3ddf3e2e7effb9bf20
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Dopowerup: 'Dopowerup',
    User: 'User',
    Cursor: 'Cursor',
    ipblacklist: 'ipblacklist',
    blacklist: 'blacklist',
    Logpowerup: 'Logpowerup',
    Logbuyram: 'Logbuyram',
    Transfer: 'Transfer',
    Stats: 'Stats',
    rpcErrors: 'rpcErrors',
    rpcSuccess: 'rpcSuccess'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model Dopowerup
   */


  export type AggregateDopowerup = {
    _count: DopowerupCountAggregateOutputType | null
    count: DopowerupCountAggregateOutputType | null
    _avg: DopowerupAvgAggregateOutputType | null
    avg: DopowerupAvgAggregateOutputType | null
    _sum: DopowerupSumAggregateOutputType | null
    sum: DopowerupSumAggregateOutputType | null
    _min: DopowerupMinAggregateOutputType | null
    min: DopowerupMinAggregateOutputType | null
    _max: DopowerupMaxAggregateOutputType | null
    max: DopowerupMaxAggregateOutputType | null
  }

  export type DopowerupAvgAggregateOutputType = {
    cpu_frac: number | null
    net_frac: number | null
    time: number | null
  }

  export type DopowerupSumAggregateOutputType = {
    cpu_frac: number | null
    net_frac: number | null
    time: number | null
  }

  export type DopowerupMinAggregateOutputType = {
    txid: string | null
    receiver: string | null
    payer: string | null
    cpu_frac: number | null
    net_frac: number | null
    time: number | null
    failed: boolean | null
    reversible: boolean | null
    userId: string | null
  }

  export type DopowerupMaxAggregateOutputType = {
    txid: string | null
    receiver: string | null
    payer: string | null
    cpu_frac: number | null
    net_frac: number | null
    time: number | null
    failed: boolean | null
    reversible: boolean | null
    userId: string | null
  }

  export type DopowerupCountAggregateOutputType = {
    txid: number
    receiver: number
    payer: number
    cpu_frac: number
    net_frac: number
    time: number
    failed: number
    reversible: number
    userId: number
    _all: number
  }


  export type DopowerupAvgAggregateInputType = {
    cpu_frac?: true
    net_frac?: true
    time?: true
  }

  export type DopowerupSumAggregateInputType = {
    cpu_frac?: true
    net_frac?: true
    time?: true
  }

  export type DopowerupMinAggregateInputType = {
    txid?: true
    receiver?: true
    payer?: true
    cpu_frac?: true
    net_frac?: true
    time?: true
    failed?: true
    reversible?: true
    userId?: true
  }

  export type DopowerupMaxAggregateInputType = {
    txid?: true
    receiver?: true
    payer?: true
    cpu_frac?: true
    net_frac?: true
    time?: true
    failed?: true
    reversible?: true
    userId?: true
  }

  export type DopowerupCountAggregateInputType = {
    txid?: true
    receiver?: true
    payer?: true
    cpu_frac?: true
    net_frac?: true
    time?: true
    failed?: true
    reversible?: true
    userId?: true
    _all?: true
  }

  export type DopowerupAggregateArgs = {
    /**
     * Filter which Dopowerup to aggregate.
     * 
    **/
    where?: DopowerupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dopowerups to fetch.
     * 
    **/
    orderBy?: Enumerable<DopowerupOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: DopowerupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dopowerups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dopowerups.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Dopowerups
    **/
    _count?: true | DopowerupCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | DopowerupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DopowerupAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: DopowerupAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DopowerupSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: DopowerupSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DopowerupMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: DopowerupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DopowerupMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: DopowerupMaxAggregateInputType
  }

  export type GetDopowerupAggregateType<T extends DopowerupAggregateArgs> = {
        [P in keyof T & keyof AggregateDopowerup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDopowerup[P]>
      : GetScalarType<T[P], AggregateDopowerup[P]>
  }


    
    
  export type DopowerupGroupByArgs = {
    where?: DopowerupWhereInput
    orderBy?: Enumerable<DopowerupOrderByInput>
    by: Array<DopowerupScalarFieldEnum>
    having?: DopowerupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DopowerupCountAggregateInputType | true
    _avg?: DopowerupAvgAggregateInputType
    _sum?: DopowerupSumAggregateInputType
    _min?: DopowerupMinAggregateInputType
    _max?: DopowerupMaxAggregateInputType
  }


  export type DopowerupGroupByOutputType = {
    txid: string
    receiver: string
    payer: string
    cpu_frac: number
    net_frac: number
    time: number
    failed: boolean
    reversible: boolean
    userId: string | null
    _count: DopowerupCountAggregateOutputType | null
    _avg: DopowerupAvgAggregateOutputType | null
    _sum: DopowerupSumAggregateOutputType | null
    _min: DopowerupMinAggregateOutputType | null
    _max: DopowerupMaxAggregateOutputType | null
  }

  type GetDopowerupGroupByPayload<T extends DopowerupGroupByArgs> = Promise<
    Array<
      PickArray<DopowerupGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof DopowerupGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], DopowerupGroupByOutputType[P]> 
            : GetScalarType<T[P], DopowerupGroupByOutputType[P]>
        }
      > 
    >


  export type DopowerupSelect = {
    txid?: boolean
    receiver?: boolean
    payer?: boolean
    cpu_frac?: boolean
    net_frac?: boolean
    time?: boolean
    failed?: boolean
    reversible?: boolean
    User?: boolean | UserArgs
    userId?: boolean
  }

  export type DopowerupInclude = {
    User?: boolean | UserArgs
  }

  export type DopowerupGetPayload<
    S extends boolean | null | undefined | DopowerupArgs,
    U = keyof S
      > = S extends true
        ? Dopowerup
    : S extends undefined
    ? never
    : S extends DopowerupArgs | DopowerupFindManyArgs
    ?'include' extends U
    ? Dopowerup  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'User'
        ? UserGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Dopowerup ?Dopowerup [P]
  : 
          P extends 'User'
        ? UserGetPayload<S['select'][P]> | null : never
  } 
    : Dopowerup
  : Dopowerup


  type DopowerupCountArgs = Merge<
    Omit<DopowerupFindManyArgs, 'select' | 'include'> & {
      select?: DopowerupCountAggregateInputType | true
    }
  >

  export interface DopowerupDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Dopowerup that matches the filter.
     * @param {DopowerupFindUniqueArgs} args - Arguments to find a Dopowerup
     * @example
     * // Get one Dopowerup
     * const dopowerup = await prisma.dopowerup.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DopowerupFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DopowerupFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Dopowerup'> extends True ? CheckSelect<T, Prisma__DopowerupClient<Dopowerup>, Prisma__DopowerupClient<DopowerupGetPayload<T>>> : CheckSelect<T, Prisma__DopowerupClient<Dopowerup | null >, Prisma__DopowerupClient<DopowerupGetPayload<T> | null >>

    /**
     * Find the first Dopowerup that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DopowerupFindFirstArgs} args - Arguments to find a Dopowerup
     * @example
     * // Get one Dopowerup
     * const dopowerup = await prisma.dopowerup.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DopowerupFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DopowerupFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Dopowerup'> extends True ? CheckSelect<T, Prisma__DopowerupClient<Dopowerup>, Prisma__DopowerupClient<DopowerupGetPayload<T>>> : CheckSelect<T, Prisma__DopowerupClient<Dopowerup | null >, Prisma__DopowerupClient<DopowerupGetPayload<T> | null >>

    /**
     * Find zero or more Dopowerups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DopowerupFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Dopowerups
     * const dopowerups = await prisma.dopowerup.findMany()
     * 
     * // Get first 10 Dopowerups
     * const dopowerups = await prisma.dopowerup.findMany({ take: 10 })
     * 
     * // Only select the `txid`
     * const dopowerupWithTxidOnly = await prisma.dopowerup.findMany({ select: { txid: true } })
     * 
    **/
    findMany<T extends DopowerupFindManyArgs>(
      args?: SelectSubset<T, DopowerupFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Dopowerup>>, PrismaPromise<Array<DopowerupGetPayload<T>>>>

    /**
     * Create a Dopowerup.
     * @param {DopowerupCreateArgs} args - Arguments to create a Dopowerup.
     * @example
     * // Create one Dopowerup
     * const Dopowerup = await prisma.dopowerup.create({
     *   data: {
     *     // ... data to create a Dopowerup
     *   }
     * })
     * 
    **/
    create<T extends DopowerupCreateArgs>(
      args: SelectSubset<T, DopowerupCreateArgs>
    ): CheckSelect<T, Prisma__DopowerupClient<Dopowerup>, Prisma__DopowerupClient<DopowerupGetPayload<T>>>

    /**
     * Delete a Dopowerup.
     * @param {DopowerupDeleteArgs} args - Arguments to delete one Dopowerup.
     * @example
     * // Delete one Dopowerup
     * const Dopowerup = await prisma.dopowerup.delete({
     *   where: {
     *     // ... filter to delete one Dopowerup
     *   }
     * })
     * 
    **/
    delete<T extends DopowerupDeleteArgs>(
      args: SelectSubset<T, DopowerupDeleteArgs>
    ): CheckSelect<T, Prisma__DopowerupClient<Dopowerup>, Prisma__DopowerupClient<DopowerupGetPayload<T>>>

    /**
     * Update one Dopowerup.
     * @param {DopowerupUpdateArgs} args - Arguments to update one Dopowerup.
     * @example
     * // Update one Dopowerup
     * const dopowerup = await prisma.dopowerup.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DopowerupUpdateArgs>(
      args: SelectSubset<T, DopowerupUpdateArgs>
    ): CheckSelect<T, Prisma__DopowerupClient<Dopowerup>, Prisma__DopowerupClient<DopowerupGetPayload<T>>>

    /**
     * Delete zero or more Dopowerups.
     * @param {DopowerupDeleteManyArgs} args - Arguments to filter Dopowerups to delete.
     * @example
     * // Delete a few Dopowerups
     * const { count } = await prisma.dopowerup.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DopowerupDeleteManyArgs>(
      args?: SelectSubset<T, DopowerupDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dopowerups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DopowerupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Dopowerups
     * const dopowerup = await prisma.dopowerup.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DopowerupUpdateManyArgs>(
      args: SelectSubset<T, DopowerupUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Dopowerup.
     * @param {DopowerupUpsertArgs} args - Arguments to update or create a Dopowerup.
     * @example
     * // Update or create a Dopowerup
     * const dopowerup = await prisma.dopowerup.upsert({
     *   create: {
     *     // ... data to create a Dopowerup
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Dopowerup we want to update
     *   }
     * })
    **/
    upsert<T extends DopowerupUpsertArgs>(
      args: SelectSubset<T, DopowerupUpsertArgs>
    ): CheckSelect<T, Prisma__DopowerupClient<Dopowerup>, Prisma__DopowerupClient<DopowerupGetPayload<T>>>

    /**
     * Count the number of Dopowerups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DopowerupCountArgs} args - Arguments to filter Dopowerups to count.
     * @example
     * // Count the number of Dopowerups
     * const count = await prisma.dopowerup.count({
     *   where: {
     *     // ... the filter for the Dopowerups we want to count
     *   }
     * })
    **/
    count<T extends DopowerupCountArgs>(
      args?: Subset<T, DopowerupCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DopowerupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Dopowerup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DopowerupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DopowerupAggregateArgs>(args: Subset<T, DopowerupAggregateArgs>): PrismaPromise<GetDopowerupAggregateType<T>>

    /**
     * Group by Dopowerup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DopowerupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DopowerupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DopowerupGroupByArgs['orderBy'] }
        : { orderBy?: DopowerupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DopowerupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDopowerupGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Dopowerup.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DopowerupClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Dopowerup findUnique
   */
  export type DopowerupFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Dopowerup
     * 
    **/
    select?: DopowerupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DopowerupInclude | null
    /**
     * Throw an Error if a Dopowerup can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Dopowerup to fetch.
     * 
    **/
    where: DopowerupWhereUniqueInput
  }


  /**
   * Dopowerup findFirst
   */
  export type DopowerupFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Dopowerup
     * 
    **/
    select?: DopowerupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DopowerupInclude | null
    /**
     * Throw an Error if a Dopowerup can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Dopowerup to fetch.
     * 
    **/
    where?: DopowerupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dopowerups to fetch.
     * 
    **/
    orderBy?: Enumerable<DopowerupOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dopowerups.
     * 
    **/
    cursor?: DopowerupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dopowerups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dopowerups.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dopowerups.
     * 
    **/
    distinct?: Enumerable<DopowerupScalarFieldEnum>
  }


  /**
   * Dopowerup findMany
   */
  export type DopowerupFindManyArgs = {
    /**
     * Select specific fields to fetch from the Dopowerup
     * 
    **/
    select?: DopowerupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DopowerupInclude | null
    /**
     * Filter, which Dopowerups to fetch.
     * 
    **/
    where?: DopowerupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dopowerups to fetch.
     * 
    **/
    orderBy?: Enumerable<DopowerupOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Dopowerups.
     * 
    **/
    cursor?: DopowerupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dopowerups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dopowerups.
     * 
    **/
    skip?: number
    distinct?: Enumerable<DopowerupScalarFieldEnum>
  }


  /**
   * Dopowerup create
   */
  export type DopowerupCreateArgs = {
    /**
     * Select specific fields to fetch from the Dopowerup
     * 
    **/
    select?: DopowerupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DopowerupInclude | null
    /**
     * The data needed to create a Dopowerup.
     * 
    **/
    data: XOR<DopowerupCreateInput, DopowerupUncheckedCreateInput>
  }


  /**
   * Dopowerup update
   */
  export type DopowerupUpdateArgs = {
    /**
     * Select specific fields to fetch from the Dopowerup
     * 
    **/
    select?: DopowerupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DopowerupInclude | null
    /**
     * The data needed to update a Dopowerup.
     * 
    **/
    data: XOR<DopowerupUpdateInput, DopowerupUncheckedUpdateInput>
    /**
     * Choose, which Dopowerup to update.
     * 
    **/
    where: DopowerupWhereUniqueInput
  }


  /**
   * Dopowerup updateMany
   */
  export type DopowerupUpdateManyArgs = {
    data: XOR<DopowerupUpdateManyMutationInput, DopowerupUncheckedUpdateManyInput>
    where?: DopowerupWhereInput
  }


  /**
   * Dopowerup upsert
   */
  export type DopowerupUpsertArgs = {
    /**
     * Select specific fields to fetch from the Dopowerup
     * 
    **/
    select?: DopowerupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DopowerupInclude | null
    /**
     * The filter to search for the Dopowerup to update in case it exists.
     * 
    **/
    where: DopowerupWhereUniqueInput
    /**
     * In case the Dopowerup found by the `where` argument doesn't exist, create a new Dopowerup with this data.
     * 
    **/
    create: XOR<DopowerupCreateInput, DopowerupUncheckedCreateInput>
    /**
     * In case the Dopowerup was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<DopowerupUpdateInput, DopowerupUncheckedUpdateInput>
  }


  /**
   * Dopowerup delete
   */
  export type DopowerupDeleteArgs = {
    /**
     * Select specific fields to fetch from the Dopowerup
     * 
    **/
    select?: DopowerupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DopowerupInclude | null
    /**
     * Filter which Dopowerup to delete.
     * 
    **/
    where: DopowerupWhereUniqueInput
  }


  /**
   * Dopowerup deleteMany
   */
  export type DopowerupDeleteManyArgs = {
    where?: DopowerupWhereInput
  }


  /**
   * Dopowerup without action
   */
  export type DopowerupArgs = {
    /**
     * Select specific fields to fetch from the Dopowerup
     * 
    **/
    select?: DopowerupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DopowerupInclude | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    telegramId: number | null
  }

  export type UserSumAggregateOutputType = {
    telegramId: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    telegramId: number | null
    telegramHandle: string | null
    eosAccount: string | null
    discordId: string | null
    discordHandle: string | null
    email: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    telegramId: number | null
    telegramHandle: string | null
    eosAccount: string | null
    discordId: string | null
    discordHandle: string | null
    email: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    telegramId: number
    telegramHandle: number
    eosAccount: number
    discordId: number
    discordHandle: number
    email: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    telegramId?: true
  }

  export type UserSumAggregateInputType = {
    telegramId?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    telegramId?: true
    telegramHandle?: true
    eosAccount?: true
    discordId?: true
    discordHandle?: true
    email?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    telegramId?: true
    telegramHandle?: true
    eosAccount?: true
    discordId?: true
    discordHandle?: true
    email?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    telegramId?: true
    telegramHandle?: true
    eosAccount?: true
    discordId?: true
    discordHandle?: true
    email?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }


    
    
  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    telegramId: number | null
    telegramHandle: string | null
    eosAccount: string | null
    discordId: string | null
    discordHandle: string | null
    email: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Promise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], UserGroupByOutputType[P]> 
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      > 
    >


  export type UserSelect = {
    id?: boolean
    telegramId?: boolean
    telegramHandle?: boolean
    eosAccount?: boolean
    discordId?: boolean
    discordHandle?: boolean
    freePowerups?: boolean | DopowerupFindManyArgs
    email?: boolean
  }

  export type UserInclude = {
    freePowerups?: boolean | DopowerupFindManyArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'freePowerups'
        ? Array < DopowerupGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
          P extends 'freePowerups'
        ? Array < DopowerupGetPayload<S['select'][P]>>  : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    freePowerups<T extends DopowerupFindManyArgs = {}>(args?: Subset<T, DopowerupFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Dopowerup>>, PrismaPromise<Array<DopowerupGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Cursor
   */


  export type AggregateCursor = {
    _count: CursorCountAggregateOutputType | null
    count: CursorCountAggregateOutputType | null
    _avg: CursorAvgAggregateOutputType | null
    avg: CursorAvgAggregateOutputType | null
    _sum: CursorSumAggregateOutputType | null
    sum: CursorSumAggregateOutputType | null
    _min: CursorMinAggregateOutputType | null
    min: CursorMinAggregateOutputType | null
    _max: CursorMaxAggregateOutputType | null
    max: CursorMaxAggregateOutputType | null
  }

  export type CursorAvgAggregateOutputType = {
    lowBlock: number | null
  }

  export type CursorSumAggregateOutputType = {
    lowBlock: number | null
  }

  export type CursorMinAggregateOutputType = {
    searchString: string | null
    cursor: string | null
    lowBlock: number | null
  }

  export type CursorMaxAggregateOutputType = {
    searchString: string | null
    cursor: string | null
    lowBlock: number | null
  }

  export type CursorCountAggregateOutputType = {
    searchString: number
    cursor: number
    lowBlock: number
    _all: number
  }


  export type CursorAvgAggregateInputType = {
    lowBlock?: true
  }

  export type CursorSumAggregateInputType = {
    lowBlock?: true
  }

  export type CursorMinAggregateInputType = {
    searchString?: true
    cursor?: true
    lowBlock?: true
  }

  export type CursorMaxAggregateInputType = {
    searchString?: true
    cursor?: true
    lowBlock?: true
  }

  export type CursorCountAggregateInputType = {
    searchString?: true
    cursor?: true
    lowBlock?: true
    _all?: true
  }

  export type CursorAggregateArgs = {
    /**
     * Filter which Cursor to aggregate.
     * 
    **/
    where?: CursorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cursors to fetch.
     * 
    **/
    orderBy?: Enumerable<CursorOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CursorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cursors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cursors.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cursors
    **/
    _count?: true | CursorCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | CursorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CursorAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: CursorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CursorSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: CursorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CursorMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: CursorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CursorMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: CursorMaxAggregateInputType
  }

  export type GetCursorAggregateType<T extends CursorAggregateArgs> = {
        [P in keyof T & keyof AggregateCursor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCursor[P]>
      : GetScalarType<T[P], AggregateCursor[P]>
  }


    
    
  export type CursorGroupByArgs = {
    where?: CursorWhereInput
    orderBy?: Enumerable<CursorOrderByInput>
    by: Array<CursorScalarFieldEnum>
    having?: CursorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CursorCountAggregateInputType | true
    _avg?: CursorAvgAggregateInputType
    _sum?: CursorSumAggregateInputType
    _min?: CursorMinAggregateInputType
    _max?: CursorMaxAggregateInputType
  }


  export type CursorGroupByOutputType = {
    searchString: string
    cursor: string
    lowBlock: number
    _count: CursorCountAggregateOutputType | null
    _avg: CursorAvgAggregateOutputType | null
    _sum: CursorSumAggregateOutputType | null
    _min: CursorMinAggregateOutputType | null
    _max: CursorMaxAggregateOutputType | null
  }

  type GetCursorGroupByPayload<T extends CursorGroupByArgs> = Promise<
    Array<
      PickArray<CursorGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof CursorGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], CursorGroupByOutputType[P]> 
            : GetScalarType<T[P], CursorGroupByOutputType[P]>
        }
      > 
    >


  export type CursorSelect = {
    searchString?: boolean
    cursor?: boolean
    lowBlock?: boolean
  }

  export type CursorGetPayload<
    S extends boolean | null | undefined | CursorArgs,
    U = keyof S
      > = S extends true
        ? Cursor
    : S extends undefined
    ? never
    : S extends CursorArgs | CursorFindManyArgs
    ?'include' extends U
    ? Cursor 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Cursor ?Cursor [P]
  : 
     never
  } 
    : Cursor
  : Cursor


  type CursorCountArgs = Merge<
    Omit<CursorFindManyArgs, 'select' | 'include'> & {
      select?: CursorCountAggregateInputType | true
    }
  >

  export interface CursorDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Cursor that matches the filter.
     * @param {CursorFindUniqueArgs} args - Arguments to find a Cursor
     * @example
     * // Get one Cursor
     * const cursor = await prisma.cursor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CursorFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CursorFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Cursor'> extends True ? CheckSelect<T, Prisma__CursorClient<Cursor>, Prisma__CursorClient<CursorGetPayload<T>>> : CheckSelect<T, Prisma__CursorClient<Cursor | null >, Prisma__CursorClient<CursorGetPayload<T> | null >>

    /**
     * Find the first Cursor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursorFindFirstArgs} args - Arguments to find a Cursor
     * @example
     * // Get one Cursor
     * const cursor = await prisma.cursor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CursorFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CursorFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Cursor'> extends True ? CheckSelect<T, Prisma__CursorClient<Cursor>, Prisma__CursorClient<CursorGetPayload<T>>> : CheckSelect<T, Prisma__CursorClient<Cursor | null >, Prisma__CursorClient<CursorGetPayload<T> | null >>

    /**
     * Find zero or more Cursors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cursors
     * const cursors = await prisma.cursor.findMany()
     * 
     * // Get first 10 Cursors
     * const cursors = await prisma.cursor.findMany({ take: 10 })
     * 
     * // Only select the `searchString`
     * const cursorWithSearchStringOnly = await prisma.cursor.findMany({ select: { searchString: true } })
     * 
    **/
    findMany<T extends CursorFindManyArgs>(
      args?: SelectSubset<T, CursorFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Cursor>>, PrismaPromise<Array<CursorGetPayload<T>>>>

    /**
     * Create a Cursor.
     * @param {CursorCreateArgs} args - Arguments to create a Cursor.
     * @example
     * // Create one Cursor
     * const Cursor = await prisma.cursor.create({
     *   data: {
     *     // ... data to create a Cursor
     *   }
     * })
     * 
    **/
    create<T extends CursorCreateArgs>(
      args: SelectSubset<T, CursorCreateArgs>
    ): CheckSelect<T, Prisma__CursorClient<Cursor>, Prisma__CursorClient<CursorGetPayload<T>>>

    /**
     * Delete a Cursor.
     * @param {CursorDeleteArgs} args - Arguments to delete one Cursor.
     * @example
     * // Delete one Cursor
     * const Cursor = await prisma.cursor.delete({
     *   where: {
     *     // ... filter to delete one Cursor
     *   }
     * })
     * 
    **/
    delete<T extends CursorDeleteArgs>(
      args: SelectSubset<T, CursorDeleteArgs>
    ): CheckSelect<T, Prisma__CursorClient<Cursor>, Prisma__CursorClient<CursorGetPayload<T>>>

    /**
     * Update one Cursor.
     * @param {CursorUpdateArgs} args - Arguments to update one Cursor.
     * @example
     * // Update one Cursor
     * const cursor = await prisma.cursor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CursorUpdateArgs>(
      args: SelectSubset<T, CursorUpdateArgs>
    ): CheckSelect<T, Prisma__CursorClient<Cursor>, Prisma__CursorClient<CursorGetPayload<T>>>

    /**
     * Delete zero or more Cursors.
     * @param {CursorDeleteManyArgs} args - Arguments to filter Cursors to delete.
     * @example
     * // Delete a few Cursors
     * const { count } = await prisma.cursor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CursorDeleteManyArgs>(
      args?: SelectSubset<T, CursorDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cursors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cursors
     * const cursor = await prisma.cursor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CursorUpdateManyArgs>(
      args: SelectSubset<T, CursorUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Cursor.
     * @param {CursorUpsertArgs} args - Arguments to update or create a Cursor.
     * @example
     * // Update or create a Cursor
     * const cursor = await prisma.cursor.upsert({
     *   create: {
     *     // ... data to create a Cursor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cursor we want to update
     *   }
     * })
    **/
    upsert<T extends CursorUpsertArgs>(
      args: SelectSubset<T, CursorUpsertArgs>
    ): CheckSelect<T, Prisma__CursorClient<Cursor>, Prisma__CursorClient<CursorGetPayload<T>>>

    /**
     * Count the number of Cursors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursorCountArgs} args - Arguments to filter Cursors to count.
     * @example
     * // Count the number of Cursors
     * const count = await prisma.cursor.count({
     *   where: {
     *     // ... the filter for the Cursors we want to count
     *   }
     * })
    **/
    count<T extends CursorCountArgs>(
      args?: Subset<T, CursorCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CursorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cursor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CursorAggregateArgs>(args: Subset<T, CursorAggregateArgs>): PrismaPromise<GetCursorAggregateType<T>>

    /**
     * Group by Cursor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CursorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CursorGroupByArgs['orderBy'] }
        : { orderBy?: CursorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CursorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCursorGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cursor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CursorClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Cursor findUnique
   */
  export type CursorFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Cursor
     * 
    **/
    select?: CursorSelect | null
    /**
     * Throw an Error if a Cursor can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Cursor to fetch.
     * 
    **/
    where: CursorWhereUniqueInput
  }


  /**
   * Cursor findFirst
   */
  export type CursorFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Cursor
     * 
    **/
    select?: CursorSelect | null
    /**
     * Throw an Error if a Cursor can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Cursor to fetch.
     * 
    **/
    where?: CursorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cursors to fetch.
     * 
    **/
    orderBy?: Enumerable<CursorOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cursors.
     * 
    **/
    cursor?: CursorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cursors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cursors.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cursors.
     * 
    **/
    distinct?: Enumerable<CursorScalarFieldEnum>
  }


  /**
   * Cursor findMany
   */
  export type CursorFindManyArgs = {
    /**
     * Select specific fields to fetch from the Cursor
     * 
    **/
    select?: CursorSelect | null
    /**
     * Filter, which Cursors to fetch.
     * 
    **/
    where?: CursorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cursors to fetch.
     * 
    **/
    orderBy?: Enumerable<CursorOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cursors.
     * 
    **/
    cursor?: CursorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cursors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cursors.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CursorScalarFieldEnum>
  }


  /**
   * Cursor create
   */
  export type CursorCreateArgs = {
    /**
     * Select specific fields to fetch from the Cursor
     * 
    **/
    select?: CursorSelect | null
    /**
     * The data needed to create a Cursor.
     * 
    **/
    data: XOR<CursorCreateInput, CursorUncheckedCreateInput>
  }


  /**
   * Cursor update
   */
  export type CursorUpdateArgs = {
    /**
     * Select specific fields to fetch from the Cursor
     * 
    **/
    select?: CursorSelect | null
    /**
     * The data needed to update a Cursor.
     * 
    **/
    data: XOR<CursorUpdateInput, CursorUncheckedUpdateInput>
    /**
     * Choose, which Cursor to update.
     * 
    **/
    where: CursorWhereUniqueInput
  }


  /**
   * Cursor updateMany
   */
  export type CursorUpdateManyArgs = {
    data: XOR<CursorUpdateManyMutationInput, CursorUncheckedUpdateManyInput>
    where?: CursorWhereInput
  }


  /**
   * Cursor upsert
   */
  export type CursorUpsertArgs = {
    /**
     * Select specific fields to fetch from the Cursor
     * 
    **/
    select?: CursorSelect | null
    /**
     * The filter to search for the Cursor to update in case it exists.
     * 
    **/
    where: CursorWhereUniqueInput
    /**
     * In case the Cursor found by the `where` argument doesn't exist, create a new Cursor with this data.
     * 
    **/
    create: XOR<CursorCreateInput, CursorUncheckedCreateInput>
    /**
     * In case the Cursor was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CursorUpdateInput, CursorUncheckedUpdateInput>
  }


  /**
   * Cursor delete
   */
  export type CursorDeleteArgs = {
    /**
     * Select specific fields to fetch from the Cursor
     * 
    **/
    select?: CursorSelect | null
    /**
     * Filter which Cursor to delete.
     * 
    **/
    where: CursorWhereUniqueInput
  }


  /**
   * Cursor deleteMany
   */
  export type CursorDeleteManyArgs = {
    where?: CursorWhereInput
  }


  /**
   * Cursor without action
   */
  export type CursorArgs = {
    /**
     * Select specific fields to fetch from the Cursor
     * 
    **/
    select?: CursorSelect | null
  }



  /**
   * Model ipblacklist
   */


  export type AggregateIpblacklist = {
    _count: IpblacklistCountAggregateOutputType | null
    count: IpblacklistCountAggregateOutputType | null
    _min: IpblacklistMinAggregateOutputType | null
    min: IpblacklistMinAggregateOutputType | null
    _max: IpblacklistMaxAggregateOutputType | null
    max: IpblacklistMaxAggregateOutputType | null
  }

  export type IpblacklistMinAggregateOutputType = {
    ip: string | null
    reason: string | null
  }

  export type IpblacklistMaxAggregateOutputType = {
    ip: string | null
    reason: string | null
  }

  export type IpblacklistCountAggregateOutputType = {
    ip: number
    reason: number
    _all: number
  }


  export type IpblacklistMinAggregateInputType = {
    ip?: true
    reason?: true
  }

  export type IpblacklistMaxAggregateInputType = {
    ip?: true
    reason?: true
  }

  export type IpblacklistCountAggregateInputType = {
    ip?: true
    reason?: true
    _all?: true
  }

  export type IpblacklistAggregateArgs = {
    /**
     * Filter which ipblacklist to aggregate.
     * 
    **/
    where?: ipblacklistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ipblacklists to fetch.
     * 
    **/
    orderBy?: Enumerable<ipblacklistOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ipblacklistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ipblacklists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ipblacklists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ipblacklists
    **/
    _count?: true | IpblacklistCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | IpblacklistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IpblacklistMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: IpblacklistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IpblacklistMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: IpblacklistMaxAggregateInputType
  }

  export type GetIpblacklistAggregateType<T extends IpblacklistAggregateArgs> = {
        [P in keyof T & keyof AggregateIpblacklist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIpblacklist[P]>
      : GetScalarType<T[P], AggregateIpblacklist[P]>
  }


    
    
  export type IpblacklistGroupByArgs = {
    where?: ipblacklistWhereInput
    orderBy?: Enumerable<ipblacklistOrderByInput>
    by: Array<IpblacklistScalarFieldEnum>
    having?: ipblacklistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IpblacklistCountAggregateInputType | true
    _min?: IpblacklistMinAggregateInputType
    _max?: IpblacklistMaxAggregateInputType
  }


  export type IpblacklistGroupByOutputType = {
    ip: string
    reason: string
    _count: IpblacklistCountAggregateOutputType | null
    _min: IpblacklistMinAggregateOutputType | null
    _max: IpblacklistMaxAggregateOutputType | null
  }

  type GetIpblacklistGroupByPayload<T extends IpblacklistGroupByArgs> = Promise<
    Array<
      PickArray<IpblacklistGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof IpblacklistGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], IpblacklistGroupByOutputType[P]> 
            : GetScalarType<T[P], IpblacklistGroupByOutputType[P]>
        }
      > 
    >


  export type ipblacklistSelect = {
    ip?: boolean
    reason?: boolean
  }

  export type ipblacklistGetPayload<
    S extends boolean | null | undefined | ipblacklistArgs,
    U = keyof S
      > = S extends true
        ? ipblacklist
    : S extends undefined
    ? never
    : S extends ipblacklistArgs | ipblacklistFindManyArgs
    ?'include' extends U
    ? ipblacklist 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof ipblacklist ?ipblacklist [P]
  : 
     never
  } 
    : ipblacklist
  : ipblacklist


  type ipblacklistCountArgs = Merge<
    Omit<ipblacklistFindManyArgs, 'select' | 'include'> & {
      select?: IpblacklistCountAggregateInputType | true
    }
  >

  export interface ipblacklistDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Ipblacklist that matches the filter.
     * @param {ipblacklistFindUniqueArgs} args - Arguments to find a Ipblacklist
     * @example
     * // Get one Ipblacklist
     * const ipblacklist = await prisma.ipblacklist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ipblacklistFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ipblacklistFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ipblacklist'> extends True ? CheckSelect<T, Prisma__ipblacklistClient<ipblacklist>, Prisma__ipblacklistClient<ipblacklistGetPayload<T>>> : CheckSelect<T, Prisma__ipblacklistClient<ipblacklist | null >, Prisma__ipblacklistClient<ipblacklistGetPayload<T> | null >>

    /**
     * Find the first Ipblacklist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ipblacklistFindFirstArgs} args - Arguments to find a Ipblacklist
     * @example
     * // Get one Ipblacklist
     * const ipblacklist = await prisma.ipblacklist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ipblacklistFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ipblacklistFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ipblacklist'> extends True ? CheckSelect<T, Prisma__ipblacklistClient<ipblacklist>, Prisma__ipblacklistClient<ipblacklistGetPayload<T>>> : CheckSelect<T, Prisma__ipblacklistClient<ipblacklist | null >, Prisma__ipblacklistClient<ipblacklistGetPayload<T> | null >>

    /**
     * Find zero or more Ipblacklists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ipblacklistFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ipblacklists
     * const ipblacklists = await prisma.ipblacklist.findMany()
     * 
     * // Get first 10 Ipblacklists
     * const ipblacklists = await prisma.ipblacklist.findMany({ take: 10 })
     * 
     * // Only select the `ip`
     * const ipblacklistWithIpOnly = await prisma.ipblacklist.findMany({ select: { ip: true } })
     * 
    **/
    findMany<T extends ipblacklistFindManyArgs>(
      args?: SelectSubset<T, ipblacklistFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ipblacklist>>, PrismaPromise<Array<ipblacklistGetPayload<T>>>>

    /**
     * Create a Ipblacklist.
     * @param {ipblacklistCreateArgs} args - Arguments to create a Ipblacklist.
     * @example
     * // Create one Ipblacklist
     * const Ipblacklist = await prisma.ipblacklist.create({
     *   data: {
     *     // ... data to create a Ipblacklist
     *   }
     * })
     * 
    **/
    create<T extends ipblacklistCreateArgs>(
      args: SelectSubset<T, ipblacklistCreateArgs>
    ): CheckSelect<T, Prisma__ipblacklistClient<ipblacklist>, Prisma__ipblacklistClient<ipblacklistGetPayload<T>>>

    /**
     * Delete a Ipblacklist.
     * @param {ipblacklistDeleteArgs} args - Arguments to delete one Ipblacklist.
     * @example
     * // Delete one Ipblacklist
     * const Ipblacklist = await prisma.ipblacklist.delete({
     *   where: {
     *     // ... filter to delete one Ipblacklist
     *   }
     * })
     * 
    **/
    delete<T extends ipblacklistDeleteArgs>(
      args: SelectSubset<T, ipblacklistDeleteArgs>
    ): CheckSelect<T, Prisma__ipblacklistClient<ipblacklist>, Prisma__ipblacklistClient<ipblacklistGetPayload<T>>>

    /**
     * Update one Ipblacklist.
     * @param {ipblacklistUpdateArgs} args - Arguments to update one Ipblacklist.
     * @example
     * // Update one Ipblacklist
     * const ipblacklist = await prisma.ipblacklist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ipblacklistUpdateArgs>(
      args: SelectSubset<T, ipblacklistUpdateArgs>
    ): CheckSelect<T, Prisma__ipblacklistClient<ipblacklist>, Prisma__ipblacklistClient<ipblacklistGetPayload<T>>>

    /**
     * Delete zero or more Ipblacklists.
     * @param {ipblacklistDeleteManyArgs} args - Arguments to filter Ipblacklists to delete.
     * @example
     * // Delete a few Ipblacklists
     * const { count } = await prisma.ipblacklist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ipblacklistDeleteManyArgs>(
      args?: SelectSubset<T, ipblacklistDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ipblacklists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ipblacklistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ipblacklists
     * const ipblacklist = await prisma.ipblacklist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ipblacklistUpdateManyArgs>(
      args: SelectSubset<T, ipblacklistUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Ipblacklist.
     * @param {ipblacklistUpsertArgs} args - Arguments to update or create a Ipblacklist.
     * @example
     * // Update or create a Ipblacklist
     * const ipblacklist = await prisma.ipblacklist.upsert({
     *   create: {
     *     // ... data to create a Ipblacklist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ipblacklist we want to update
     *   }
     * })
    **/
    upsert<T extends ipblacklistUpsertArgs>(
      args: SelectSubset<T, ipblacklistUpsertArgs>
    ): CheckSelect<T, Prisma__ipblacklistClient<ipblacklist>, Prisma__ipblacklistClient<ipblacklistGetPayload<T>>>

    /**
     * Count the number of Ipblacklists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ipblacklistCountArgs} args - Arguments to filter Ipblacklists to count.
     * @example
     * // Count the number of Ipblacklists
     * const count = await prisma.ipblacklist.count({
     *   where: {
     *     // ... the filter for the Ipblacklists we want to count
     *   }
     * })
    **/
    count<T extends ipblacklistCountArgs>(
      args?: Subset<T, ipblacklistCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IpblacklistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ipblacklist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IpblacklistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IpblacklistAggregateArgs>(args: Subset<T, IpblacklistAggregateArgs>): PrismaPromise<GetIpblacklistAggregateType<T>>

    /**
     * Group by Ipblacklist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IpblacklistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IpblacklistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IpblacklistGroupByArgs['orderBy'] }
        : { orderBy?: IpblacklistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IpblacklistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIpblacklistGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ipblacklist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ipblacklistClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ipblacklist findUnique
   */
  export type ipblacklistFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the ipblacklist
     * 
    **/
    select?: ipblacklistSelect | null
    /**
     * Throw an Error if a ipblacklist can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ipblacklist to fetch.
     * 
    **/
    where: ipblacklistWhereUniqueInput
  }


  /**
   * ipblacklist findFirst
   */
  export type ipblacklistFindFirstArgs = {
    /**
     * Select specific fields to fetch from the ipblacklist
     * 
    **/
    select?: ipblacklistSelect | null
    /**
     * Throw an Error if a ipblacklist can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ipblacklist to fetch.
     * 
    **/
    where?: ipblacklistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ipblacklists to fetch.
     * 
    **/
    orderBy?: Enumerable<ipblacklistOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ipblacklists.
     * 
    **/
    cursor?: ipblacklistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ipblacklists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ipblacklists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ipblacklists.
     * 
    **/
    distinct?: Enumerable<IpblacklistScalarFieldEnum>
  }


  /**
   * ipblacklist findMany
   */
  export type ipblacklistFindManyArgs = {
    /**
     * Select specific fields to fetch from the ipblacklist
     * 
    **/
    select?: ipblacklistSelect | null
    /**
     * Filter, which ipblacklists to fetch.
     * 
    **/
    where?: ipblacklistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ipblacklists to fetch.
     * 
    **/
    orderBy?: Enumerable<ipblacklistOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ipblacklists.
     * 
    **/
    cursor?: ipblacklistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ipblacklists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ipblacklists.
     * 
    **/
    skip?: number
    distinct?: Enumerable<IpblacklistScalarFieldEnum>
  }


  /**
   * ipblacklist create
   */
  export type ipblacklistCreateArgs = {
    /**
     * Select specific fields to fetch from the ipblacklist
     * 
    **/
    select?: ipblacklistSelect | null
    /**
     * The data needed to create a ipblacklist.
     * 
    **/
    data: XOR<ipblacklistCreateInput, ipblacklistUncheckedCreateInput>
  }


  /**
   * ipblacklist update
   */
  export type ipblacklistUpdateArgs = {
    /**
     * Select specific fields to fetch from the ipblacklist
     * 
    **/
    select?: ipblacklistSelect | null
    /**
     * The data needed to update a ipblacklist.
     * 
    **/
    data: XOR<ipblacklistUpdateInput, ipblacklistUncheckedUpdateInput>
    /**
     * Choose, which ipblacklist to update.
     * 
    **/
    where: ipblacklistWhereUniqueInput
  }


  /**
   * ipblacklist updateMany
   */
  export type ipblacklistUpdateManyArgs = {
    data: XOR<ipblacklistUpdateManyMutationInput, ipblacklistUncheckedUpdateManyInput>
    where?: ipblacklistWhereInput
  }


  /**
   * ipblacklist upsert
   */
  export type ipblacklistUpsertArgs = {
    /**
     * Select specific fields to fetch from the ipblacklist
     * 
    **/
    select?: ipblacklistSelect | null
    /**
     * The filter to search for the ipblacklist to update in case it exists.
     * 
    **/
    where: ipblacklistWhereUniqueInput
    /**
     * In case the ipblacklist found by the `where` argument doesn't exist, create a new ipblacklist with this data.
     * 
    **/
    create: XOR<ipblacklistCreateInput, ipblacklistUncheckedCreateInput>
    /**
     * In case the ipblacklist was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ipblacklistUpdateInput, ipblacklistUncheckedUpdateInput>
  }


  /**
   * ipblacklist delete
   */
  export type ipblacklistDeleteArgs = {
    /**
     * Select specific fields to fetch from the ipblacklist
     * 
    **/
    select?: ipblacklistSelect | null
    /**
     * Filter which ipblacklist to delete.
     * 
    **/
    where: ipblacklistWhereUniqueInput
  }


  /**
   * ipblacklist deleteMany
   */
  export type ipblacklistDeleteManyArgs = {
    where?: ipblacklistWhereInput
  }


  /**
   * ipblacklist without action
   */
  export type ipblacklistArgs = {
    /**
     * Select specific fields to fetch from the ipblacklist
     * 
    **/
    select?: ipblacklistSelect | null
  }



  /**
   * Model blacklist
   */


  export type AggregateBlacklist = {
    _count: BlacklistCountAggregateOutputType | null
    count: BlacklistCountAggregateOutputType | null
    _min: BlacklistMinAggregateOutputType | null
    min: BlacklistMinAggregateOutputType | null
    _max: BlacklistMaxAggregateOutputType | null
    max: BlacklistMaxAggregateOutputType | null
  }

  export type BlacklistMinAggregateOutputType = {
    account: string | null
    reason: string | null
  }

  export type BlacklistMaxAggregateOutputType = {
    account: string | null
    reason: string | null
  }

  export type BlacklistCountAggregateOutputType = {
    account: number
    reason: number
    _all: number
  }


  export type BlacklistMinAggregateInputType = {
    account?: true
    reason?: true
  }

  export type BlacklistMaxAggregateInputType = {
    account?: true
    reason?: true
  }

  export type BlacklistCountAggregateInputType = {
    account?: true
    reason?: true
    _all?: true
  }

  export type BlacklistAggregateArgs = {
    /**
     * Filter which blacklist to aggregate.
     * 
    **/
    where?: blacklistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of blacklists to fetch.
     * 
    **/
    orderBy?: Enumerable<blacklistOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: blacklistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` blacklists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` blacklists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned blacklists
    **/
    _count?: true | BlacklistCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | BlacklistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BlacklistMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: BlacklistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BlacklistMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: BlacklistMaxAggregateInputType
  }

  export type GetBlacklistAggregateType<T extends BlacklistAggregateArgs> = {
        [P in keyof T & keyof AggregateBlacklist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBlacklist[P]>
      : GetScalarType<T[P], AggregateBlacklist[P]>
  }


    
    
  export type BlacklistGroupByArgs = {
    where?: blacklistWhereInput
    orderBy?: Enumerable<blacklistOrderByInput>
    by: Array<BlacklistScalarFieldEnum>
    having?: blacklistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BlacklistCountAggregateInputType | true
    _min?: BlacklistMinAggregateInputType
    _max?: BlacklistMaxAggregateInputType
  }


  export type BlacklistGroupByOutputType = {
    account: string
    reason: string
    _count: BlacklistCountAggregateOutputType | null
    _min: BlacklistMinAggregateOutputType | null
    _max: BlacklistMaxAggregateOutputType | null
  }

  type GetBlacklistGroupByPayload<T extends BlacklistGroupByArgs> = Promise<
    Array<
      PickArray<BlacklistGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof BlacklistGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], BlacklistGroupByOutputType[P]> 
            : GetScalarType<T[P], BlacklistGroupByOutputType[P]>
        }
      > 
    >


  export type blacklistSelect = {
    account?: boolean
    reason?: boolean
  }

  export type blacklistGetPayload<
    S extends boolean | null | undefined | blacklistArgs,
    U = keyof S
      > = S extends true
        ? blacklist
    : S extends undefined
    ? never
    : S extends blacklistArgs | blacklistFindManyArgs
    ?'include' extends U
    ? blacklist 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof blacklist ?blacklist [P]
  : 
     never
  } 
    : blacklist
  : blacklist


  type blacklistCountArgs = Merge<
    Omit<blacklistFindManyArgs, 'select' | 'include'> & {
      select?: BlacklistCountAggregateInputType | true
    }
  >

  export interface blacklistDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Blacklist that matches the filter.
     * @param {blacklistFindUniqueArgs} args - Arguments to find a Blacklist
     * @example
     * // Get one Blacklist
     * const blacklist = await prisma.blacklist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends blacklistFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, blacklistFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'blacklist'> extends True ? CheckSelect<T, Prisma__blacklistClient<blacklist>, Prisma__blacklistClient<blacklistGetPayload<T>>> : CheckSelect<T, Prisma__blacklistClient<blacklist | null >, Prisma__blacklistClient<blacklistGetPayload<T> | null >>

    /**
     * Find the first Blacklist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {blacklistFindFirstArgs} args - Arguments to find a Blacklist
     * @example
     * // Get one Blacklist
     * const blacklist = await prisma.blacklist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends blacklistFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, blacklistFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'blacklist'> extends True ? CheckSelect<T, Prisma__blacklistClient<blacklist>, Prisma__blacklistClient<blacklistGetPayload<T>>> : CheckSelect<T, Prisma__blacklistClient<blacklist | null >, Prisma__blacklistClient<blacklistGetPayload<T> | null >>

    /**
     * Find zero or more Blacklists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {blacklistFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Blacklists
     * const blacklists = await prisma.blacklist.findMany()
     * 
     * // Get first 10 Blacklists
     * const blacklists = await prisma.blacklist.findMany({ take: 10 })
     * 
     * // Only select the `account`
     * const blacklistWithAccountOnly = await prisma.blacklist.findMany({ select: { account: true } })
     * 
    **/
    findMany<T extends blacklistFindManyArgs>(
      args?: SelectSubset<T, blacklistFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<blacklist>>, PrismaPromise<Array<blacklistGetPayload<T>>>>

    /**
     * Create a Blacklist.
     * @param {blacklistCreateArgs} args - Arguments to create a Blacklist.
     * @example
     * // Create one Blacklist
     * const Blacklist = await prisma.blacklist.create({
     *   data: {
     *     // ... data to create a Blacklist
     *   }
     * })
     * 
    **/
    create<T extends blacklistCreateArgs>(
      args: SelectSubset<T, blacklistCreateArgs>
    ): CheckSelect<T, Prisma__blacklistClient<blacklist>, Prisma__blacklistClient<blacklistGetPayload<T>>>

    /**
     * Delete a Blacklist.
     * @param {blacklistDeleteArgs} args - Arguments to delete one Blacklist.
     * @example
     * // Delete one Blacklist
     * const Blacklist = await prisma.blacklist.delete({
     *   where: {
     *     // ... filter to delete one Blacklist
     *   }
     * })
     * 
    **/
    delete<T extends blacklistDeleteArgs>(
      args: SelectSubset<T, blacklistDeleteArgs>
    ): CheckSelect<T, Prisma__blacklistClient<blacklist>, Prisma__blacklistClient<blacklistGetPayload<T>>>

    /**
     * Update one Blacklist.
     * @param {blacklistUpdateArgs} args - Arguments to update one Blacklist.
     * @example
     * // Update one Blacklist
     * const blacklist = await prisma.blacklist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends blacklistUpdateArgs>(
      args: SelectSubset<T, blacklistUpdateArgs>
    ): CheckSelect<T, Prisma__blacklistClient<blacklist>, Prisma__blacklistClient<blacklistGetPayload<T>>>

    /**
     * Delete zero or more Blacklists.
     * @param {blacklistDeleteManyArgs} args - Arguments to filter Blacklists to delete.
     * @example
     * // Delete a few Blacklists
     * const { count } = await prisma.blacklist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends blacklistDeleteManyArgs>(
      args?: SelectSubset<T, blacklistDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Blacklists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {blacklistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Blacklists
     * const blacklist = await prisma.blacklist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends blacklistUpdateManyArgs>(
      args: SelectSubset<T, blacklistUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Blacklist.
     * @param {blacklistUpsertArgs} args - Arguments to update or create a Blacklist.
     * @example
     * // Update or create a Blacklist
     * const blacklist = await prisma.blacklist.upsert({
     *   create: {
     *     // ... data to create a Blacklist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Blacklist we want to update
     *   }
     * })
    **/
    upsert<T extends blacklistUpsertArgs>(
      args: SelectSubset<T, blacklistUpsertArgs>
    ): CheckSelect<T, Prisma__blacklistClient<blacklist>, Prisma__blacklistClient<blacklistGetPayload<T>>>

    /**
     * Count the number of Blacklists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {blacklistCountArgs} args - Arguments to filter Blacklists to count.
     * @example
     * // Count the number of Blacklists
     * const count = await prisma.blacklist.count({
     *   where: {
     *     // ... the filter for the Blacklists we want to count
     *   }
     * })
    **/
    count<T extends blacklistCountArgs>(
      args?: Subset<T, blacklistCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BlacklistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Blacklist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlacklistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BlacklistAggregateArgs>(args: Subset<T, BlacklistAggregateArgs>): PrismaPromise<GetBlacklistAggregateType<T>>

    /**
     * Group by Blacklist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlacklistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BlacklistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BlacklistGroupByArgs['orderBy'] }
        : { orderBy?: BlacklistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BlacklistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBlacklistGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for blacklist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__blacklistClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * blacklist findUnique
   */
  export type blacklistFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the blacklist
     * 
    **/
    select?: blacklistSelect | null
    /**
     * Throw an Error if a blacklist can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which blacklist to fetch.
     * 
    **/
    where: blacklistWhereUniqueInput
  }


  /**
   * blacklist findFirst
   */
  export type blacklistFindFirstArgs = {
    /**
     * Select specific fields to fetch from the blacklist
     * 
    **/
    select?: blacklistSelect | null
    /**
     * Throw an Error if a blacklist can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which blacklist to fetch.
     * 
    **/
    where?: blacklistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of blacklists to fetch.
     * 
    **/
    orderBy?: Enumerable<blacklistOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for blacklists.
     * 
    **/
    cursor?: blacklistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` blacklists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` blacklists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of blacklists.
     * 
    **/
    distinct?: Enumerable<BlacklistScalarFieldEnum>
  }


  /**
   * blacklist findMany
   */
  export type blacklistFindManyArgs = {
    /**
     * Select specific fields to fetch from the blacklist
     * 
    **/
    select?: blacklistSelect | null
    /**
     * Filter, which blacklists to fetch.
     * 
    **/
    where?: blacklistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of blacklists to fetch.
     * 
    **/
    orderBy?: Enumerable<blacklistOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing blacklists.
     * 
    **/
    cursor?: blacklistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` blacklists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` blacklists.
     * 
    **/
    skip?: number
    distinct?: Enumerable<BlacklistScalarFieldEnum>
  }


  /**
   * blacklist create
   */
  export type blacklistCreateArgs = {
    /**
     * Select specific fields to fetch from the blacklist
     * 
    **/
    select?: blacklistSelect | null
    /**
     * The data needed to create a blacklist.
     * 
    **/
    data: XOR<blacklistCreateInput, blacklistUncheckedCreateInput>
  }


  /**
   * blacklist update
   */
  export type blacklistUpdateArgs = {
    /**
     * Select specific fields to fetch from the blacklist
     * 
    **/
    select?: blacklistSelect | null
    /**
     * The data needed to update a blacklist.
     * 
    **/
    data: XOR<blacklistUpdateInput, blacklistUncheckedUpdateInput>
    /**
     * Choose, which blacklist to update.
     * 
    **/
    where: blacklistWhereUniqueInput
  }


  /**
   * blacklist updateMany
   */
  export type blacklistUpdateManyArgs = {
    data: XOR<blacklistUpdateManyMutationInput, blacklistUncheckedUpdateManyInput>
    where?: blacklistWhereInput
  }


  /**
   * blacklist upsert
   */
  export type blacklistUpsertArgs = {
    /**
     * Select specific fields to fetch from the blacklist
     * 
    **/
    select?: blacklistSelect | null
    /**
     * The filter to search for the blacklist to update in case it exists.
     * 
    **/
    where: blacklistWhereUniqueInput
    /**
     * In case the blacklist found by the `where` argument doesn't exist, create a new blacklist with this data.
     * 
    **/
    create: XOR<blacklistCreateInput, blacklistUncheckedCreateInput>
    /**
     * In case the blacklist was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<blacklistUpdateInput, blacklistUncheckedUpdateInput>
  }


  /**
   * blacklist delete
   */
  export type blacklistDeleteArgs = {
    /**
     * Select specific fields to fetch from the blacklist
     * 
    **/
    select?: blacklistSelect | null
    /**
     * Filter which blacklist to delete.
     * 
    **/
    where: blacklistWhereUniqueInput
  }


  /**
   * blacklist deleteMany
   */
  export type blacklistDeleteManyArgs = {
    where?: blacklistWhereInput
  }


  /**
   * blacklist without action
   */
  export type blacklistArgs = {
    /**
     * Select specific fields to fetch from the blacklist
     * 
    **/
    select?: blacklistSelect | null
  }



  /**
   * Model Logpowerup
   */


  export type AggregateLogpowerup = {
    _count: LogpowerupCountAggregateOutputType | null
    count: LogpowerupCountAggregateOutputType | null
    _avg: LogpowerupAvgAggregateOutputType | null
    avg: LogpowerupAvgAggregateOutputType | null
    _sum: LogpowerupSumAggregateOutputType | null
    sum: LogpowerupSumAggregateOutputType | null
    _min: LogpowerupMinAggregateOutputType | null
    min: LogpowerupMinAggregateOutputType | null
    _max: LogpowerupMaxAggregateOutputType | null
    max: LogpowerupMaxAggregateOutputType | null
  }

  export type LogpowerupAvgAggregateOutputType = {
    seq: number | null
    cost: number | null
    fee: number | null
    received_cpu_ms: number | null
    received_net_kb: number | null
    total_billed: number | null
    blockTime: number | null
  }

  export type LogpowerupSumAggregateOutputType = {
    seq: number | null
    cost: number | null
    fee: number | null
    received_cpu_ms: number | null
    received_net_kb: number | null
    total_billed: number | null
    blockTime: number | null
  }

  export type LogpowerupMinAggregateOutputType = {
    seq: number | null
    txid: string | null
    action: string | null
    cost: number | null
    fee: number | null
    received_cpu_ms: number | null
    received_net_kb: number | null
    receiver: string | null
    payer: string | null
    total_billed: number | null
    blockTime: number | null
  }

  export type LogpowerupMaxAggregateOutputType = {
    seq: number | null
    txid: string | null
    action: string | null
    cost: number | null
    fee: number | null
    received_cpu_ms: number | null
    received_net_kb: number | null
    receiver: string | null
    payer: string | null
    total_billed: number | null
    blockTime: number | null
  }

  export type LogpowerupCountAggregateOutputType = {
    seq: number
    txid: number
    action: number
    cost: number
    fee: number
    received_cpu_ms: number
    received_net_kb: number
    receiver: number
    payer: number
    total_billed: number
    blockTime: number
    _all: number
  }


  export type LogpowerupAvgAggregateInputType = {
    seq?: true
    cost?: true
    fee?: true
    received_cpu_ms?: true
    received_net_kb?: true
    total_billed?: true
    blockTime?: true
  }

  export type LogpowerupSumAggregateInputType = {
    seq?: true
    cost?: true
    fee?: true
    received_cpu_ms?: true
    received_net_kb?: true
    total_billed?: true
    blockTime?: true
  }

  export type LogpowerupMinAggregateInputType = {
    seq?: true
    txid?: true
    action?: true
    cost?: true
    fee?: true
    received_cpu_ms?: true
    received_net_kb?: true
    receiver?: true
    payer?: true
    total_billed?: true
    blockTime?: true
  }

  export type LogpowerupMaxAggregateInputType = {
    seq?: true
    txid?: true
    action?: true
    cost?: true
    fee?: true
    received_cpu_ms?: true
    received_net_kb?: true
    receiver?: true
    payer?: true
    total_billed?: true
    blockTime?: true
  }

  export type LogpowerupCountAggregateInputType = {
    seq?: true
    txid?: true
    action?: true
    cost?: true
    fee?: true
    received_cpu_ms?: true
    received_net_kb?: true
    receiver?: true
    payer?: true
    total_billed?: true
    blockTime?: true
    _all?: true
  }

  export type LogpowerupAggregateArgs = {
    /**
     * Filter which Logpowerup to aggregate.
     * 
    **/
    where?: LogpowerupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logpowerups to fetch.
     * 
    **/
    orderBy?: Enumerable<LogpowerupOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: LogpowerupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logpowerups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logpowerups.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Logpowerups
    **/
    _count?: true | LogpowerupCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | LogpowerupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LogpowerupAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: LogpowerupAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LogpowerupSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: LogpowerupSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LogpowerupMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: LogpowerupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LogpowerupMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: LogpowerupMaxAggregateInputType
  }

  export type GetLogpowerupAggregateType<T extends LogpowerupAggregateArgs> = {
        [P in keyof T & keyof AggregateLogpowerup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLogpowerup[P]>
      : GetScalarType<T[P], AggregateLogpowerup[P]>
  }


    
    
  export type LogpowerupGroupByArgs = {
    where?: LogpowerupWhereInput
    orderBy?: Enumerable<LogpowerupOrderByInput>
    by: Array<LogpowerupScalarFieldEnum>
    having?: LogpowerupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LogpowerupCountAggregateInputType | true
    _avg?: LogpowerupAvgAggregateInputType
    _sum?: LogpowerupSumAggregateInputType
    _min?: LogpowerupMinAggregateInputType
    _max?: LogpowerupMaxAggregateInputType
  }


  export type LogpowerupGroupByOutputType = {
    seq: number
    txid: string
    action: string
    cost: number
    fee: number
    received_cpu_ms: number
    received_net_kb: number
    receiver: string
    payer: string
    total_billed: number
    blockTime: number
    _count: LogpowerupCountAggregateOutputType | null
    _avg: LogpowerupAvgAggregateOutputType | null
    _sum: LogpowerupSumAggregateOutputType | null
    _min: LogpowerupMinAggregateOutputType | null
    _max: LogpowerupMaxAggregateOutputType | null
  }

  type GetLogpowerupGroupByPayload<T extends LogpowerupGroupByArgs> = Promise<
    Array<
      PickArray<LogpowerupGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof LogpowerupGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], LogpowerupGroupByOutputType[P]> 
            : GetScalarType<T[P], LogpowerupGroupByOutputType[P]>
        }
      > 
    >


  export type LogpowerupSelect = {
    seq?: boolean
    txid?: boolean
    action?: boolean
    cost?: boolean
    fee?: boolean
    received_cpu_ms?: boolean
    received_net_kb?: boolean
    receiver?: boolean
    payer?: boolean
    total_billed?: boolean
    blockTime?: boolean
  }

  export type LogpowerupGetPayload<
    S extends boolean | null | undefined | LogpowerupArgs,
    U = keyof S
      > = S extends true
        ? Logpowerup
    : S extends undefined
    ? never
    : S extends LogpowerupArgs | LogpowerupFindManyArgs
    ?'include' extends U
    ? Logpowerup 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Logpowerup ?Logpowerup [P]
  : 
     never
  } 
    : Logpowerup
  : Logpowerup


  type LogpowerupCountArgs = Merge<
    Omit<LogpowerupFindManyArgs, 'select' | 'include'> & {
      select?: LogpowerupCountAggregateInputType | true
    }
  >

  export interface LogpowerupDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Logpowerup that matches the filter.
     * @param {LogpowerupFindUniqueArgs} args - Arguments to find a Logpowerup
     * @example
     * // Get one Logpowerup
     * const logpowerup = await prisma.logpowerup.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LogpowerupFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LogpowerupFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Logpowerup'> extends True ? CheckSelect<T, Prisma__LogpowerupClient<Logpowerup>, Prisma__LogpowerupClient<LogpowerupGetPayload<T>>> : CheckSelect<T, Prisma__LogpowerupClient<Logpowerup | null >, Prisma__LogpowerupClient<LogpowerupGetPayload<T> | null >>

    /**
     * Find the first Logpowerup that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogpowerupFindFirstArgs} args - Arguments to find a Logpowerup
     * @example
     * // Get one Logpowerup
     * const logpowerup = await prisma.logpowerup.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LogpowerupFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LogpowerupFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Logpowerup'> extends True ? CheckSelect<T, Prisma__LogpowerupClient<Logpowerup>, Prisma__LogpowerupClient<LogpowerupGetPayload<T>>> : CheckSelect<T, Prisma__LogpowerupClient<Logpowerup | null >, Prisma__LogpowerupClient<LogpowerupGetPayload<T> | null >>

    /**
     * Find zero or more Logpowerups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogpowerupFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Logpowerups
     * const logpowerups = await prisma.logpowerup.findMany()
     * 
     * // Get first 10 Logpowerups
     * const logpowerups = await prisma.logpowerup.findMany({ take: 10 })
     * 
     * // Only select the `seq`
     * const logpowerupWithSeqOnly = await prisma.logpowerup.findMany({ select: { seq: true } })
     * 
    **/
    findMany<T extends LogpowerupFindManyArgs>(
      args?: SelectSubset<T, LogpowerupFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Logpowerup>>, PrismaPromise<Array<LogpowerupGetPayload<T>>>>

    /**
     * Create a Logpowerup.
     * @param {LogpowerupCreateArgs} args - Arguments to create a Logpowerup.
     * @example
     * // Create one Logpowerup
     * const Logpowerup = await prisma.logpowerup.create({
     *   data: {
     *     // ... data to create a Logpowerup
     *   }
     * })
     * 
    **/
    create<T extends LogpowerupCreateArgs>(
      args: SelectSubset<T, LogpowerupCreateArgs>
    ): CheckSelect<T, Prisma__LogpowerupClient<Logpowerup>, Prisma__LogpowerupClient<LogpowerupGetPayload<T>>>

    /**
     * Delete a Logpowerup.
     * @param {LogpowerupDeleteArgs} args - Arguments to delete one Logpowerup.
     * @example
     * // Delete one Logpowerup
     * const Logpowerup = await prisma.logpowerup.delete({
     *   where: {
     *     // ... filter to delete one Logpowerup
     *   }
     * })
     * 
    **/
    delete<T extends LogpowerupDeleteArgs>(
      args: SelectSubset<T, LogpowerupDeleteArgs>
    ): CheckSelect<T, Prisma__LogpowerupClient<Logpowerup>, Prisma__LogpowerupClient<LogpowerupGetPayload<T>>>

    /**
     * Update one Logpowerup.
     * @param {LogpowerupUpdateArgs} args - Arguments to update one Logpowerup.
     * @example
     * // Update one Logpowerup
     * const logpowerup = await prisma.logpowerup.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LogpowerupUpdateArgs>(
      args: SelectSubset<T, LogpowerupUpdateArgs>
    ): CheckSelect<T, Prisma__LogpowerupClient<Logpowerup>, Prisma__LogpowerupClient<LogpowerupGetPayload<T>>>

    /**
     * Delete zero or more Logpowerups.
     * @param {LogpowerupDeleteManyArgs} args - Arguments to filter Logpowerups to delete.
     * @example
     * // Delete a few Logpowerups
     * const { count } = await prisma.logpowerup.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LogpowerupDeleteManyArgs>(
      args?: SelectSubset<T, LogpowerupDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Logpowerups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogpowerupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Logpowerups
     * const logpowerup = await prisma.logpowerup.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LogpowerupUpdateManyArgs>(
      args: SelectSubset<T, LogpowerupUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Logpowerup.
     * @param {LogpowerupUpsertArgs} args - Arguments to update or create a Logpowerup.
     * @example
     * // Update or create a Logpowerup
     * const logpowerup = await prisma.logpowerup.upsert({
     *   create: {
     *     // ... data to create a Logpowerup
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Logpowerup we want to update
     *   }
     * })
    **/
    upsert<T extends LogpowerupUpsertArgs>(
      args: SelectSubset<T, LogpowerupUpsertArgs>
    ): CheckSelect<T, Prisma__LogpowerupClient<Logpowerup>, Prisma__LogpowerupClient<LogpowerupGetPayload<T>>>

    /**
     * Count the number of Logpowerups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogpowerupCountArgs} args - Arguments to filter Logpowerups to count.
     * @example
     * // Count the number of Logpowerups
     * const count = await prisma.logpowerup.count({
     *   where: {
     *     // ... the filter for the Logpowerups we want to count
     *   }
     * })
    **/
    count<T extends LogpowerupCountArgs>(
      args?: Subset<T, LogpowerupCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LogpowerupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Logpowerup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogpowerupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LogpowerupAggregateArgs>(args: Subset<T, LogpowerupAggregateArgs>): PrismaPromise<GetLogpowerupAggregateType<T>>

    /**
     * Group by Logpowerup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogpowerupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LogpowerupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LogpowerupGroupByArgs['orderBy'] }
        : { orderBy?: LogpowerupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LogpowerupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLogpowerupGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Logpowerup.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LogpowerupClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Logpowerup findUnique
   */
  export type LogpowerupFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Logpowerup
     * 
    **/
    select?: LogpowerupSelect | null
    /**
     * Throw an Error if a Logpowerup can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Logpowerup to fetch.
     * 
    **/
    where: LogpowerupWhereUniqueInput
  }


  /**
   * Logpowerup findFirst
   */
  export type LogpowerupFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Logpowerup
     * 
    **/
    select?: LogpowerupSelect | null
    /**
     * Throw an Error if a Logpowerup can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Logpowerup to fetch.
     * 
    **/
    where?: LogpowerupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logpowerups to fetch.
     * 
    **/
    orderBy?: Enumerable<LogpowerupOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Logpowerups.
     * 
    **/
    cursor?: LogpowerupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logpowerups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logpowerups.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Logpowerups.
     * 
    **/
    distinct?: Enumerable<LogpowerupScalarFieldEnum>
  }


  /**
   * Logpowerup findMany
   */
  export type LogpowerupFindManyArgs = {
    /**
     * Select specific fields to fetch from the Logpowerup
     * 
    **/
    select?: LogpowerupSelect | null
    /**
     * Filter, which Logpowerups to fetch.
     * 
    **/
    where?: LogpowerupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logpowerups to fetch.
     * 
    **/
    orderBy?: Enumerable<LogpowerupOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Logpowerups.
     * 
    **/
    cursor?: LogpowerupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logpowerups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logpowerups.
     * 
    **/
    skip?: number
    distinct?: Enumerable<LogpowerupScalarFieldEnum>
  }


  /**
   * Logpowerup create
   */
  export type LogpowerupCreateArgs = {
    /**
     * Select specific fields to fetch from the Logpowerup
     * 
    **/
    select?: LogpowerupSelect | null
    /**
     * The data needed to create a Logpowerup.
     * 
    **/
    data: XOR<LogpowerupCreateInput, LogpowerupUncheckedCreateInput>
  }


  /**
   * Logpowerup update
   */
  export type LogpowerupUpdateArgs = {
    /**
     * Select specific fields to fetch from the Logpowerup
     * 
    **/
    select?: LogpowerupSelect | null
    /**
     * The data needed to update a Logpowerup.
     * 
    **/
    data: XOR<LogpowerupUpdateInput, LogpowerupUncheckedUpdateInput>
    /**
     * Choose, which Logpowerup to update.
     * 
    **/
    where: LogpowerupWhereUniqueInput
  }


  /**
   * Logpowerup updateMany
   */
  export type LogpowerupUpdateManyArgs = {
    data: XOR<LogpowerupUpdateManyMutationInput, LogpowerupUncheckedUpdateManyInput>
    where?: LogpowerupWhereInput
  }


  /**
   * Logpowerup upsert
   */
  export type LogpowerupUpsertArgs = {
    /**
     * Select specific fields to fetch from the Logpowerup
     * 
    **/
    select?: LogpowerupSelect | null
    /**
     * The filter to search for the Logpowerup to update in case it exists.
     * 
    **/
    where: LogpowerupWhereUniqueInput
    /**
     * In case the Logpowerup found by the `where` argument doesn't exist, create a new Logpowerup with this data.
     * 
    **/
    create: XOR<LogpowerupCreateInput, LogpowerupUncheckedCreateInput>
    /**
     * In case the Logpowerup was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<LogpowerupUpdateInput, LogpowerupUncheckedUpdateInput>
  }


  /**
   * Logpowerup delete
   */
  export type LogpowerupDeleteArgs = {
    /**
     * Select specific fields to fetch from the Logpowerup
     * 
    **/
    select?: LogpowerupSelect | null
    /**
     * Filter which Logpowerup to delete.
     * 
    **/
    where: LogpowerupWhereUniqueInput
  }


  /**
   * Logpowerup deleteMany
   */
  export type LogpowerupDeleteManyArgs = {
    where?: LogpowerupWhereInput
  }


  /**
   * Logpowerup without action
   */
  export type LogpowerupArgs = {
    /**
     * Select specific fields to fetch from the Logpowerup
     * 
    **/
    select?: LogpowerupSelect | null
  }



  /**
   * Model Logbuyram
   */


  export type AggregateLogbuyram = {
    _count: LogbuyramCountAggregateOutputType | null
    count: LogbuyramCountAggregateOutputType | null
    _avg: LogbuyramAvgAggregateOutputType | null
    avg: LogbuyramAvgAggregateOutputType | null
    _sum: LogbuyramSumAggregateOutputType | null
    sum: LogbuyramSumAggregateOutputType | null
    _min: LogbuyramMinAggregateOutputType | null
    min: LogbuyramMinAggregateOutputType | null
    _max: LogbuyramMaxAggregateOutputType | null
    max: LogbuyramMaxAggregateOutputType | null
  }

  export type LogbuyramAvgAggregateOutputType = {
    seq: number | null
    cost: number | null
    fee: number | null
    received_ram_kb: number | null
    total_billed: number | null
    blockTime: number | null
  }

  export type LogbuyramSumAggregateOutputType = {
    seq: number | null
    cost: number | null
    fee: number | null
    received_ram_kb: number | null
    total_billed: number | null
    blockTime: number | null
  }

  export type LogbuyramMinAggregateOutputType = {
    seq: number | null
    txid: string | null
    action: string | null
    cost: number | null
    fee: number | null
    received_ram_kb: number | null
    receiver: string | null
    payer: string | null
    total_billed: number | null
    blockTime: number | null
  }

  export type LogbuyramMaxAggregateOutputType = {
    seq: number | null
    txid: string | null
    action: string | null
    cost: number | null
    fee: number | null
    received_ram_kb: number | null
    receiver: string | null
    payer: string | null
    total_billed: number | null
    blockTime: number | null
  }

  export type LogbuyramCountAggregateOutputType = {
    seq: number
    txid: number
    action: number
    cost: number
    fee: number
    received_ram_kb: number
    receiver: number
    payer: number
    total_billed: number
    blockTime: number
    _all: number
  }


  export type LogbuyramAvgAggregateInputType = {
    seq?: true
    cost?: true
    fee?: true
    received_ram_kb?: true
    total_billed?: true
    blockTime?: true
  }

  export type LogbuyramSumAggregateInputType = {
    seq?: true
    cost?: true
    fee?: true
    received_ram_kb?: true
    total_billed?: true
    blockTime?: true
  }

  export type LogbuyramMinAggregateInputType = {
    seq?: true
    txid?: true
    action?: true
    cost?: true
    fee?: true
    received_ram_kb?: true
    receiver?: true
    payer?: true
    total_billed?: true
    blockTime?: true
  }

  export type LogbuyramMaxAggregateInputType = {
    seq?: true
    txid?: true
    action?: true
    cost?: true
    fee?: true
    received_ram_kb?: true
    receiver?: true
    payer?: true
    total_billed?: true
    blockTime?: true
  }

  export type LogbuyramCountAggregateInputType = {
    seq?: true
    txid?: true
    action?: true
    cost?: true
    fee?: true
    received_ram_kb?: true
    receiver?: true
    payer?: true
    total_billed?: true
    blockTime?: true
    _all?: true
  }

  export type LogbuyramAggregateArgs = {
    /**
     * Filter which Logbuyram to aggregate.
     * 
    **/
    where?: LogbuyramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logbuyrams to fetch.
     * 
    **/
    orderBy?: Enumerable<LogbuyramOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: LogbuyramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logbuyrams from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logbuyrams.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Logbuyrams
    **/
    _count?: true | LogbuyramCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | LogbuyramCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LogbuyramAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: LogbuyramAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LogbuyramSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: LogbuyramSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LogbuyramMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: LogbuyramMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LogbuyramMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: LogbuyramMaxAggregateInputType
  }

  export type GetLogbuyramAggregateType<T extends LogbuyramAggregateArgs> = {
        [P in keyof T & keyof AggregateLogbuyram]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLogbuyram[P]>
      : GetScalarType<T[P], AggregateLogbuyram[P]>
  }


    
    
  export type LogbuyramGroupByArgs = {
    where?: LogbuyramWhereInput
    orderBy?: Enumerable<LogbuyramOrderByInput>
    by: Array<LogbuyramScalarFieldEnum>
    having?: LogbuyramScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LogbuyramCountAggregateInputType | true
    _avg?: LogbuyramAvgAggregateInputType
    _sum?: LogbuyramSumAggregateInputType
    _min?: LogbuyramMinAggregateInputType
    _max?: LogbuyramMaxAggregateInputType
  }


  export type LogbuyramGroupByOutputType = {
    seq: number
    txid: string
    action: string
    cost: number
    fee: number
    received_ram_kb: number
    receiver: string
    payer: string
    total_billed: number
    blockTime: number
    _count: LogbuyramCountAggregateOutputType | null
    _avg: LogbuyramAvgAggregateOutputType | null
    _sum: LogbuyramSumAggregateOutputType | null
    _min: LogbuyramMinAggregateOutputType | null
    _max: LogbuyramMaxAggregateOutputType | null
  }

  type GetLogbuyramGroupByPayload<T extends LogbuyramGroupByArgs> = Promise<
    Array<
      PickArray<LogbuyramGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof LogbuyramGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], LogbuyramGroupByOutputType[P]> 
            : GetScalarType<T[P], LogbuyramGroupByOutputType[P]>
        }
      > 
    >


  export type LogbuyramSelect = {
    seq?: boolean
    txid?: boolean
    action?: boolean
    cost?: boolean
    fee?: boolean
    received_ram_kb?: boolean
    receiver?: boolean
    payer?: boolean
    total_billed?: boolean
    blockTime?: boolean
  }

  export type LogbuyramGetPayload<
    S extends boolean | null | undefined | LogbuyramArgs,
    U = keyof S
      > = S extends true
        ? Logbuyram
    : S extends undefined
    ? never
    : S extends LogbuyramArgs | LogbuyramFindManyArgs
    ?'include' extends U
    ? Logbuyram 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Logbuyram ?Logbuyram [P]
  : 
     never
  } 
    : Logbuyram
  : Logbuyram


  type LogbuyramCountArgs = Merge<
    Omit<LogbuyramFindManyArgs, 'select' | 'include'> & {
      select?: LogbuyramCountAggregateInputType | true
    }
  >

  export interface LogbuyramDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Logbuyram that matches the filter.
     * @param {LogbuyramFindUniqueArgs} args - Arguments to find a Logbuyram
     * @example
     * // Get one Logbuyram
     * const logbuyram = await prisma.logbuyram.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LogbuyramFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LogbuyramFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Logbuyram'> extends True ? CheckSelect<T, Prisma__LogbuyramClient<Logbuyram>, Prisma__LogbuyramClient<LogbuyramGetPayload<T>>> : CheckSelect<T, Prisma__LogbuyramClient<Logbuyram | null >, Prisma__LogbuyramClient<LogbuyramGetPayload<T> | null >>

    /**
     * Find the first Logbuyram that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogbuyramFindFirstArgs} args - Arguments to find a Logbuyram
     * @example
     * // Get one Logbuyram
     * const logbuyram = await prisma.logbuyram.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LogbuyramFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LogbuyramFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Logbuyram'> extends True ? CheckSelect<T, Prisma__LogbuyramClient<Logbuyram>, Prisma__LogbuyramClient<LogbuyramGetPayload<T>>> : CheckSelect<T, Prisma__LogbuyramClient<Logbuyram | null >, Prisma__LogbuyramClient<LogbuyramGetPayload<T> | null >>

    /**
     * Find zero or more Logbuyrams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogbuyramFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Logbuyrams
     * const logbuyrams = await prisma.logbuyram.findMany()
     * 
     * // Get first 10 Logbuyrams
     * const logbuyrams = await prisma.logbuyram.findMany({ take: 10 })
     * 
     * // Only select the `seq`
     * const logbuyramWithSeqOnly = await prisma.logbuyram.findMany({ select: { seq: true } })
     * 
    **/
    findMany<T extends LogbuyramFindManyArgs>(
      args?: SelectSubset<T, LogbuyramFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Logbuyram>>, PrismaPromise<Array<LogbuyramGetPayload<T>>>>

    /**
     * Create a Logbuyram.
     * @param {LogbuyramCreateArgs} args - Arguments to create a Logbuyram.
     * @example
     * // Create one Logbuyram
     * const Logbuyram = await prisma.logbuyram.create({
     *   data: {
     *     // ... data to create a Logbuyram
     *   }
     * })
     * 
    **/
    create<T extends LogbuyramCreateArgs>(
      args: SelectSubset<T, LogbuyramCreateArgs>
    ): CheckSelect<T, Prisma__LogbuyramClient<Logbuyram>, Prisma__LogbuyramClient<LogbuyramGetPayload<T>>>

    /**
     * Delete a Logbuyram.
     * @param {LogbuyramDeleteArgs} args - Arguments to delete one Logbuyram.
     * @example
     * // Delete one Logbuyram
     * const Logbuyram = await prisma.logbuyram.delete({
     *   where: {
     *     // ... filter to delete one Logbuyram
     *   }
     * })
     * 
    **/
    delete<T extends LogbuyramDeleteArgs>(
      args: SelectSubset<T, LogbuyramDeleteArgs>
    ): CheckSelect<T, Prisma__LogbuyramClient<Logbuyram>, Prisma__LogbuyramClient<LogbuyramGetPayload<T>>>

    /**
     * Update one Logbuyram.
     * @param {LogbuyramUpdateArgs} args - Arguments to update one Logbuyram.
     * @example
     * // Update one Logbuyram
     * const logbuyram = await prisma.logbuyram.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LogbuyramUpdateArgs>(
      args: SelectSubset<T, LogbuyramUpdateArgs>
    ): CheckSelect<T, Prisma__LogbuyramClient<Logbuyram>, Prisma__LogbuyramClient<LogbuyramGetPayload<T>>>

    /**
     * Delete zero or more Logbuyrams.
     * @param {LogbuyramDeleteManyArgs} args - Arguments to filter Logbuyrams to delete.
     * @example
     * // Delete a few Logbuyrams
     * const { count } = await prisma.logbuyram.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LogbuyramDeleteManyArgs>(
      args?: SelectSubset<T, LogbuyramDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Logbuyrams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogbuyramUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Logbuyrams
     * const logbuyram = await prisma.logbuyram.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LogbuyramUpdateManyArgs>(
      args: SelectSubset<T, LogbuyramUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Logbuyram.
     * @param {LogbuyramUpsertArgs} args - Arguments to update or create a Logbuyram.
     * @example
     * // Update or create a Logbuyram
     * const logbuyram = await prisma.logbuyram.upsert({
     *   create: {
     *     // ... data to create a Logbuyram
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Logbuyram we want to update
     *   }
     * })
    **/
    upsert<T extends LogbuyramUpsertArgs>(
      args: SelectSubset<T, LogbuyramUpsertArgs>
    ): CheckSelect<T, Prisma__LogbuyramClient<Logbuyram>, Prisma__LogbuyramClient<LogbuyramGetPayload<T>>>

    /**
     * Count the number of Logbuyrams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogbuyramCountArgs} args - Arguments to filter Logbuyrams to count.
     * @example
     * // Count the number of Logbuyrams
     * const count = await prisma.logbuyram.count({
     *   where: {
     *     // ... the filter for the Logbuyrams we want to count
     *   }
     * })
    **/
    count<T extends LogbuyramCountArgs>(
      args?: Subset<T, LogbuyramCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LogbuyramCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Logbuyram.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogbuyramAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LogbuyramAggregateArgs>(args: Subset<T, LogbuyramAggregateArgs>): PrismaPromise<GetLogbuyramAggregateType<T>>

    /**
     * Group by Logbuyram.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogbuyramGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LogbuyramGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LogbuyramGroupByArgs['orderBy'] }
        : { orderBy?: LogbuyramGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LogbuyramGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLogbuyramGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Logbuyram.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LogbuyramClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Logbuyram findUnique
   */
  export type LogbuyramFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Logbuyram
     * 
    **/
    select?: LogbuyramSelect | null
    /**
     * Throw an Error if a Logbuyram can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Logbuyram to fetch.
     * 
    **/
    where: LogbuyramWhereUniqueInput
  }


  /**
   * Logbuyram findFirst
   */
  export type LogbuyramFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Logbuyram
     * 
    **/
    select?: LogbuyramSelect | null
    /**
     * Throw an Error if a Logbuyram can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Logbuyram to fetch.
     * 
    **/
    where?: LogbuyramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logbuyrams to fetch.
     * 
    **/
    orderBy?: Enumerable<LogbuyramOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Logbuyrams.
     * 
    **/
    cursor?: LogbuyramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logbuyrams from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logbuyrams.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Logbuyrams.
     * 
    **/
    distinct?: Enumerable<LogbuyramScalarFieldEnum>
  }


  /**
   * Logbuyram findMany
   */
  export type LogbuyramFindManyArgs = {
    /**
     * Select specific fields to fetch from the Logbuyram
     * 
    **/
    select?: LogbuyramSelect | null
    /**
     * Filter, which Logbuyrams to fetch.
     * 
    **/
    where?: LogbuyramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logbuyrams to fetch.
     * 
    **/
    orderBy?: Enumerable<LogbuyramOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Logbuyrams.
     * 
    **/
    cursor?: LogbuyramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logbuyrams from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logbuyrams.
     * 
    **/
    skip?: number
    distinct?: Enumerable<LogbuyramScalarFieldEnum>
  }


  /**
   * Logbuyram create
   */
  export type LogbuyramCreateArgs = {
    /**
     * Select specific fields to fetch from the Logbuyram
     * 
    **/
    select?: LogbuyramSelect | null
    /**
     * The data needed to create a Logbuyram.
     * 
    **/
    data: XOR<LogbuyramCreateInput, LogbuyramUncheckedCreateInput>
  }


  /**
   * Logbuyram update
   */
  export type LogbuyramUpdateArgs = {
    /**
     * Select specific fields to fetch from the Logbuyram
     * 
    **/
    select?: LogbuyramSelect | null
    /**
     * The data needed to update a Logbuyram.
     * 
    **/
    data: XOR<LogbuyramUpdateInput, LogbuyramUncheckedUpdateInput>
    /**
     * Choose, which Logbuyram to update.
     * 
    **/
    where: LogbuyramWhereUniqueInput
  }


  /**
   * Logbuyram updateMany
   */
  export type LogbuyramUpdateManyArgs = {
    data: XOR<LogbuyramUpdateManyMutationInput, LogbuyramUncheckedUpdateManyInput>
    where?: LogbuyramWhereInput
  }


  /**
   * Logbuyram upsert
   */
  export type LogbuyramUpsertArgs = {
    /**
     * Select specific fields to fetch from the Logbuyram
     * 
    **/
    select?: LogbuyramSelect | null
    /**
     * The filter to search for the Logbuyram to update in case it exists.
     * 
    **/
    where: LogbuyramWhereUniqueInput
    /**
     * In case the Logbuyram found by the `where` argument doesn't exist, create a new Logbuyram with this data.
     * 
    **/
    create: XOR<LogbuyramCreateInput, LogbuyramUncheckedCreateInput>
    /**
     * In case the Logbuyram was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<LogbuyramUpdateInput, LogbuyramUncheckedUpdateInput>
  }


  /**
   * Logbuyram delete
   */
  export type LogbuyramDeleteArgs = {
    /**
     * Select specific fields to fetch from the Logbuyram
     * 
    **/
    select?: LogbuyramSelect | null
    /**
     * Filter which Logbuyram to delete.
     * 
    **/
    where: LogbuyramWhereUniqueInput
  }


  /**
   * Logbuyram deleteMany
   */
  export type LogbuyramDeleteManyArgs = {
    where?: LogbuyramWhereInput
  }


  /**
   * Logbuyram without action
   */
  export type LogbuyramArgs = {
    /**
     * Select specific fields to fetch from the Logbuyram
     * 
    **/
    select?: LogbuyramSelect | null
  }



  /**
   * Model Transfer
   */


  export type AggregateTransfer = {
    _count: TransferCountAggregateOutputType | null
    count: TransferCountAggregateOutputType | null
    _avg: TransferAvgAggregateOutputType | null
    avg: TransferAvgAggregateOutputType | null
    _sum: TransferSumAggregateOutputType | null
    sum: TransferSumAggregateOutputType | null
    _min: TransferMinAggregateOutputType | null
    min: TransferMinAggregateOutputType | null
    _max: TransferMaxAggregateOutputType | null
    max: TransferMaxAggregateOutputType | null
  }

  export type TransferAvgAggregateOutputType = {
    seq: number | null
    quantity: number | null
    blockTime: number | null
  }

  export type TransferSumAggregateOutputType = {
    seq: number | null
    quantity: number | null
    blockTime: number | null
  }

  export type TransferMinAggregateOutputType = {
    seq: number | null
    from: string | null
    to: string | null
    quantity: number | null
    memo: string | null
    symbol: string | null
    txid: string | null
    blockTime: number | null
  }

  export type TransferMaxAggregateOutputType = {
    seq: number | null
    from: string | null
    to: string | null
    quantity: number | null
    memo: string | null
    symbol: string | null
    txid: string | null
    blockTime: number | null
  }

  export type TransferCountAggregateOutputType = {
    seq: number
    from: number
    to: number
    quantity: number
    memo: number
    symbol: number
    txid: number
    blockTime: number
    _all: number
  }


  export type TransferAvgAggregateInputType = {
    seq?: true
    quantity?: true
    blockTime?: true
  }

  export type TransferSumAggregateInputType = {
    seq?: true
    quantity?: true
    blockTime?: true
  }

  export type TransferMinAggregateInputType = {
    seq?: true
    from?: true
    to?: true
    quantity?: true
    memo?: true
    symbol?: true
    txid?: true
    blockTime?: true
  }

  export type TransferMaxAggregateInputType = {
    seq?: true
    from?: true
    to?: true
    quantity?: true
    memo?: true
    symbol?: true
    txid?: true
    blockTime?: true
  }

  export type TransferCountAggregateInputType = {
    seq?: true
    from?: true
    to?: true
    quantity?: true
    memo?: true
    symbol?: true
    txid?: true
    blockTime?: true
    _all?: true
  }

  export type TransferAggregateArgs = {
    /**
     * Filter which Transfer to aggregate.
     * 
    **/
    where?: TransferWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transfers to fetch.
     * 
    **/
    orderBy?: Enumerable<TransferOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TransferWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transfers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transfers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transfers
    **/
    _count?: true | TransferCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | TransferCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransferAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: TransferAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransferSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: TransferSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransferMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: TransferMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransferMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: TransferMaxAggregateInputType
  }

  export type GetTransferAggregateType<T extends TransferAggregateArgs> = {
        [P in keyof T & keyof AggregateTransfer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransfer[P]>
      : GetScalarType<T[P], AggregateTransfer[P]>
  }


    
    
  export type TransferGroupByArgs = {
    where?: TransferWhereInput
    orderBy?: Enumerable<TransferOrderByInput>
    by: Array<TransferScalarFieldEnum>
    having?: TransferScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransferCountAggregateInputType | true
    _avg?: TransferAvgAggregateInputType
    _sum?: TransferSumAggregateInputType
    _min?: TransferMinAggregateInputType
    _max?: TransferMaxAggregateInputType
  }


  export type TransferGroupByOutputType = {
    seq: number
    from: string
    to: string
    quantity: number
    memo: string
    symbol: string
    txid: string
    blockTime: number
    _count: TransferCountAggregateOutputType | null
    _avg: TransferAvgAggregateOutputType | null
    _sum: TransferSumAggregateOutputType | null
    _min: TransferMinAggregateOutputType | null
    _max: TransferMaxAggregateOutputType | null
  }

  type GetTransferGroupByPayload<T extends TransferGroupByArgs> = Promise<
    Array<
      PickArray<TransferGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof TransferGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], TransferGroupByOutputType[P]> 
            : GetScalarType<T[P], TransferGroupByOutputType[P]>
        }
      > 
    >


  export type TransferSelect = {
    seq?: boolean
    from?: boolean
    to?: boolean
    quantity?: boolean
    memo?: boolean
    symbol?: boolean
    txid?: boolean
    blockTime?: boolean
  }

  export type TransferGetPayload<
    S extends boolean | null | undefined | TransferArgs,
    U = keyof S
      > = S extends true
        ? Transfer
    : S extends undefined
    ? never
    : S extends TransferArgs | TransferFindManyArgs
    ?'include' extends U
    ? Transfer 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Transfer ?Transfer [P]
  : 
     never
  } 
    : Transfer
  : Transfer


  type TransferCountArgs = Merge<
    Omit<TransferFindManyArgs, 'select' | 'include'> & {
      select?: TransferCountAggregateInputType | true
    }
  >

  export interface TransferDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Transfer that matches the filter.
     * @param {TransferFindUniqueArgs} args - Arguments to find a Transfer
     * @example
     * // Get one Transfer
     * const transfer = await prisma.transfer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TransferFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TransferFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Transfer'> extends True ? CheckSelect<T, Prisma__TransferClient<Transfer>, Prisma__TransferClient<TransferGetPayload<T>>> : CheckSelect<T, Prisma__TransferClient<Transfer | null >, Prisma__TransferClient<TransferGetPayload<T> | null >>

    /**
     * Find the first Transfer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransferFindFirstArgs} args - Arguments to find a Transfer
     * @example
     * // Get one Transfer
     * const transfer = await prisma.transfer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TransferFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TransferFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Transfer'> extends True ? CheckSelect<T, Prisma__TransferClient<Transfer>, Prisma__TransferClient<TransferGetPayload<T>>> : CheckSelect<T, Prisma__TransferClient<Transfer | null >, Prisma__TransferClient<TransferGetPayload<T> | null >>

    /**
     * Find zero or more Transfers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransferFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transfers
     * const transfers = await prisma.transfer.findMany()
     * 
     * // Get first 10 Transfers
     * const transfers = await prisma.transfer.findMany({ take: 10 })
     * 
     * // Only select the `seq`
     * const transferWithSeqOnly = await prisma.transfer.findMany({ select: { seq: true } })
     * 
    **/
    findMany<T extends TransferFindManyArgs>(
      args?: SelectSubset<T, TransferFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Transfer>>, PrismaPromise<Array<TransferGetPayload<T>>>>

    /**
     * Create a Transfer.
     * @param {TransferCreateArgs} args - Arguments to create a Transfer.
     * @example
     * // Create one Transfer
     * const Transfer = await prisma.transfer.create({
     *   data: {
     *     // ... data to create a Transfer
     *   }
     * })
     * 
    **/
    create<T extends TransferCreateArgs>(
      args: SelectSubset<T, TransferCreateArgs>
    ): CheckSelect<T, Prisma__TransferClient<Transfer>, Prisma__TransferClient<TransferGetPayload<T>>>

    /**
     * Delete a Transfer.
     * @param {TransferDeleteArgs} args - Arguments to delete one Transfer.
     * @example
     * // Delete one Transfer
     * const Transfer = await prisma.transfer.delete({
     *   where: {
     *     // ... filter to delete one Transfer
     *   }
     * })
     * 
    **/
    delete<T extends TransferDeleteArgs>(
      args: SelectSubset<T, TransferDeleteArgs>
    ): CheckSelect<T, Prisma__TransferClient<Transfer>, Prisma__TransferClient<TransferGetPayload<T>>>

    /**
     * Update one Transfer.
     * @param {TransferUpdateArgs} args - Arguments to update one Transfer.
     * @example
     * // Update one Transfer
     * const transfer = await prisma.transfer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TransferUpdateArgs>(
      args: SelectSubset<T, TransferUpdateArgs>
    ): CheckSelect<T, Prisma__TransferClient<Transfer>, Prisma__TransferClient<TransferGetPayload<T>>>

    /**
     * Delete zero or more Transfers.
     * @param {TransferDeleteManyArgs} args - Arguments to filter Transfers to delete.
     * @example
     * // Delete a few Transfers
     * const { count } = await prisma.transfer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TransferDeleteManyArgs>(
      args?: SelectSubset<T, TransferDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transfers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransferUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transfers
     * const transfer = await prisma.transfer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TransferUpdateManyArgs>(
      args: SelectSubset<T, TransferUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Transfer.
     * @param {TransferUpsertArgs} args - Arguments to update or create a Transfer.
     * @example
     * // Update or create a Transfer
     * const transfer = await prisma.transfer.upsert({
     *   create: {
     *     // ... data to create a Transfer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transfer we want to update
     *   }
     * })
    **/
    upsert<T extends TransferUpsertArgs>(
      args: SelectSubset<T, TransferUpsertArgs>
    ): CheckSelect<T, Prisma__TransferClient<Transfer>, Prisma__TransferClient<TransferGetPayload<T>>>

    /**
     * Count the number of Transfers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransferCountArgs} args - Arguments to filter Transfers to count.
     * @example
     * // Count the number of Transfers
     * const count = await prisma.transfer.count({
     *   where: {
     *     // ... the filter for the Transfers we want to count
     *   }
     * })
    **/
    count<T extends TransferCountArgs>(
      args?: Subset<T, TransferCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransferCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transfer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransferAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransferAggregateArgs>(args: Subset<T, TransferAggregateArgs>): PrismaPromise<GetTransferAggregateType<T>>

    /**
     * Group by Transfer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransferGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransferGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransferGroupByArgs['orderBy'] }
        : { orderBy?: TransferGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransferGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransferGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transfer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TransferClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Transfer findUnique
   */
  export type TransferFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Transfer
     * 
    **/
    select?: TransferSelect | null
    /**
     * Throw an Error if a Transfer can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Transfer to fetch.
     * 
    **/
    where: TransferWhereUniqueInput
  }


  /**
   * Transfer findFirst
   */
  export type TransferFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Transfer
     * 
    **/
    select?: TransferSelect | null
    /**
     * Throw an Error if a Transfer can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Transfer to fetch.
     * 
    **/
    where?: TransferWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transfers to fetch.
     * 
    **/
    orderBy?: Enumerable<TransferOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transfers.
     * 
    **/
    cursor?: TransferWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transfers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transfers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transfers.
     * 
    **/
    distinct?: Enumerable<TransferScalarFieldEnum>
  }


  /**
   * Transfer findMany
   */
  export type TransferFindManyArgs = {
    /**
     * Select specific fields to fetch from the Transfer
     * 
    **/
    select?: TransferSelect | null
    /**
     * Filter, which Transfers to fetch.
     * 
    **/
    where?: TransferWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transfers to fetch.
     * 
    **/
    orderBy?: Enumerable<TransferOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transfers.
     * 
    **/
    cursor?: TransferWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transfers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transfers.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TransferScalarFieldEnum>
  }


  /**
   * Transfer create
   */
  export type TransferCreateArgs = {
    /**
     * Select specific fields to fetch from the Transfer
     * 
    **/
    select?: TransferSelect | null
    /**
     * The data needed to create a Transfer.
     * 
    **/
    data: XOR<TransferCreateInput, TransferUncheckedCreateInput>
  }


  /**
   * Transfer update
   */
  export type TransferUpdateArgs = {
    /**
     * Select specific fields to fetch from the Transfer
     * 
    **/
    select?: TransferSelect | null
    /**
     * The data needed to update a Transfer.
     * 
    **/
    data: XOR<TransferUpdateInput, TransferUncheckedUpdateInput>
    /**
     * Choose, which Transfer to update.
     * 
    **/
    where: TransferWhereUniqueInput
  }


  /**
   * Transfer updateMany
   */
  export type TransferUpdateManyArgs = {
    data: XOR<TransferUpdateManyMutationInput, TransferUncheckedUpdateManyInput>
    where?: TransferWhereInput
  }


  /**
   * Transfer upsert
   */
  export type TransferUpsertArgs = {
    /**
     * Select specific fields to fetch from the Transfer
     * 
    **/
    select?: TransferSelect | null
    /**
     * The filter to search for the Transfer to update in case it exists.
     * 
    **/
    where: TransferWhereUniqueInput
    /**
     * In case the Transfer found by the `where` argument doesn't exist, create a new Transfer with this data.
     * 
    **/
    create: XOR<TransferCreateInput, TransferUncheckedCreateInput>
    /**
     * In case the Transfer was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TransferUpdateInput, TransferUncheckedUpdateInput>
  }


  /**
   * Transfer delete
   */
  export type TransferDeleteArgs = {
    /**
     * Select specific fields to fetch from the Transfer
     * 
    **/
    select?: TransferSelect | null
    /**
     * Filter which Transfer to delete.
     * 
    **/
    where: TransferWhereUniqueInput
  }


  /**
   * Transfer deleteMany
   */
  export type TransferDeleteManyArgs = {
    where?: TransferWhereInput
  }


  /**
   * Transfer without action
   */
  export type TransferArgs = {
    /**
     * Select specific fields to fetch from the Transfer
     * 
    **/
    select?: TransferSelect | null
  }



  /**
   * Model Stats
   */


  export type AggregateStats = {
    _count: StatsCountAggregateOutputType | null
    count: StatsCountAggregateOutputType | null
    _avg: StatsAvgAggregateOutputType | null
    avg: StatsAvgAggregateOutputType | null
    _sum: StatsSumAggregateOutputType | null
    sum: StatsSumAggregateOutputType | null
    _min: StatsMinAggregateOutputType | null
    min: StatsMinAggregateOutputType | null
    _max: StatsMaxAggregateOutputType | null
    max: StatsMaxAggregateOutputType | null
  }

  export type StatsAvgAggregateOutputType = {
    owners: number | null
    totalWatched: number | null
    totalDeposited: number | null
    internalEOSBal: number | null
    eosBal: number | null
    autopowerups24hr: number | null
    autopowerupCost24hr: number | null
    autobuyram24hr: number | null
    autopowerupfees24hr: number | null
    autobuyramfees24hr: number | null
    autobuyramCost24hr: number | null
    registeredUsersTotal: number | null
    activeTgUsers: number | null
    activeDiscordUsers: number | null
    freePowerups24hr: number | null
    freePowerupsCost24hr: number | null
    createdAt: number | null
  }

  export type StatsSumAggregateOutputType = {
    owners: number | null
    totalWatched: number | null
    totalDeposited: number | null
    internalEOSBal: number | null
    eosBal: number | null
    autopowerups24hr: number | null
    autopowerupCost24hr: number | null
    autobuyram24hr: number | null
    autopowerupfees24hr: number | null
    autobuyramfees24hr: number | null
    autobuyramCost24hr: number | null
    registeredUsersTotal: number | null
    activeTgUsers: number | null
    activeDiscordUsers: number | null
    freePowerups24hr: number | null
    freePowerupsCost24hr: number | null
    createdAt: number | null
  }

  export type StatsMinAggregateOutputType = {
    id: string | null
    owners: number | null
    totalWatched: number | null
    totalDeposited: number | null
    internalEOSBal: number | null
    eosBal: number | null
    autopowerups24hr: number | null
    autopowerupCost24hr: number | null
    autobuyram24hr: number | null
    autopowerupfees24hr: number | null
    autobuyramfees24hr: number | null
    autobuyramCost24hr: number | null
    registeredUsersTotal: number | null
    activeTgUsers: number | null
    activeDiscordUsers: number | null
    freePowerups24hr: number | null
    freePowerupsCost24hr: number | null
    createdAt: number | null
    rpcErrorStats: string | null
  }

  export type StatsMaxAggregateOutputType = {
    id: string | null
    owners: number | null
    totalWatched: number | null
    totalDeposited: number | null
    internalEOSBal: number | null
    eosBal: number | null
    autopowerups24hr: number | null
    autopowerupCost24hr: number | null
    autobuyram24hr: number | null
    autopowerupfees24hr: number | null
    autobuyramfees24hr: number | null
    autobuyramCost24hr: number | null
    registeredUsersTotal: number | null
    activeTgUsers: number | null
    activeDiscordUsers: number | null
    freePowerups24hr: number | null
    freePowerupsCost24hr: number | null
    createdAt: number | null
    rpcErrorStats: string | null
  }

  export type StatsCountAggregateOutputType = {
    id: number
    owners: number
    totalWatched: number
    totalDeposited: number
    internalEOSBal: number
    eosBal: number
    autopowerups24hr: number
    autopowerupCost24hr: number
    autobuyram24hr: number
    autopowerupfees24hr: number
    autobuyramfees24hr: number
    autobuyramCost24hr: number
    registeredUsersTotal: number
    activeTgUsers: number
    activeDiscordUsers: number
    freePowerups24hr: number
    freePowerupsCost24hr: number
    createdAt: number
    rpcErrorStats: number
    _all: number
  }


  export type StatsAvgAggregateInputType = {
    owners?: true
    totalWatched?: true
    totalDeposited?: true
    internalEOSBal?: true
    eosBal?: true
    autopowerups24hr?: true
    autopowerupCost24hr?: true
    autobuyram24hr?: true
    autopowerupfees24hr?: true
    autobuyramfees24hr?: true
    autobuyramCost24hr?: true
    registeredUsersTotal?: true
    activeTgUsers?: true
    activeDiscordUsers?: true
    freePowerups24hr?: true
    freePowerupsCost24hr?: true
    createdAt?: true
  }

  export type StatsSumAggregateInputType = {
    owners?: true
    totalWatched?: true
    totalDeposited?: true
    internalEOSBal?: true
    eosBal?: true
    autopowerups24hr?: true
    autopowerupCost24hr?: true
    autobuyram24hr?: true
    autopowerupfees24hr?: true
    autobuyramfees24hr?: true
    autobuyramCost24hr?: true
    registeredUsersTotal?: true
    activeTgUsers?: true
    activeDiscordUsers?: true
    freePowerups24hr?: true
    freePowerupsCost24hr?: true
    createdAt?: true
  }

  export type StatsMinAggregateInputType = {
    id?: true
    owners?: true
    totalWatched?: true
    totalDeposited?: true
    internalEOSBal?: true
    eosBal?: true
    autopowerups24hr?: true
    autopowerupCost24hr?: true
    autobuyram24hr?: true
    autopowerupfees24hr?: true
    autobuyramfees24hr?: true
    autobuyramCost24hr?: true
    registeredUsersTotal?: true
    activeTgUsers?: true
    activeDiscordUsers?: true
    freePowerups24hr?: true
    freePowerupsCost24hr?: true
    createdAt?: true
    rpcErrorStats?: true
  }

  export type StatsMaxAggregateInputType = {
    id?: true
    owners?: true
    totalWatched?: true
    totalDeposited?: true
    internalEOSBal?: true
    eosBal?: true
    autopowerups24hr?: true
    autopowerupCost24hr?: true
    autobuyram24hr?: true
    autopowerupfees24hr?: true
    autobuyramfees24hr?: true
    autobuyramCost24hr?: true
    registeredUsersTotal?: true
    activeTgUsers?: true
    activeDiscordUsers?: true
    freePowerups24hr?: true
    freePowerupsCost24hr?: true
    createdAt?: true
    rpcErrorStats?: true
  }

  export type StatsCountAggregateInputType = {
    id?: true
    owners?: true
    totalWatched?: true
    totalDeposited?: true
    internalEOSBal?: true
    eosBal?: true
    autopowerups24hr?: true
    autopowerupCost24hr?: true
    autobuyram24hr?: true
    autopowerupfees24hr?: true
    autobuyramfees24hr?: true
    autobuyramCost24hr?: true
    registeredUsersTotal?: true
    activeTgUsers?: true
    activeDiscordUsers?: true
    freePowerups24hr?: true
    freePowerupsCost24hr?: true
    createdAt?: true
    rpcErrorStats?: true
    _all?: true
  }

  export type StatsAggregateArgs = {
    /**
     * Filter which Stats to aggregate.
     * 
    **/
    where?: StatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stats to fetch.
     * 
    **/
    orderBy?: Enumerable<StatsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: StatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stats from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stats.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stats
    **/
    _count?: true | StatsCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | StatsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StatsAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: StatsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StatsSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: StatsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatsMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: StatsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatsMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: StatsMaxAggregateInputType
  }

  export type GetStatsAggregateType<T extends StatsAggregateArgs> = {
        [P in keyof T & keyof AggregateStats]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStats[P]>
      : GetScalarType<T[P], AggregateStats[P]>
  }


    
    
  export type StatsGroupByArgs = {
    where?: StatsWhereInput
    orderBy?: Enumerable<StatsOrderByInput>
    by: Array<StatsScalarFieldEnum>
    having?: StatsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatsCountAggregateInputType | true
    _avg?: StatsAvgAggregateInputType
    _sum?: StatsSumAggregateInputType
    _min?: StatsMinAggregateInputType
    _max?: StatsMaxAggregateInputType
  }


  export type StatsGroupByOutputType = {
    id: string
    owners: number
    totalWatched: number
    totalDeposited: number
    internalEOSBal: number
    eosBal: number
    autopowerups24hr: number
    autopowerupCost24hr: number
    autobuyram24hr: number
    autopowerupfees24hr: number
    autobuyramfees24hr: number
    autobuyramCost24hr: number
    registeredUsersTotal: number
    activeTgUsers: number
    activeDiscordUsers: number
    freePowerups24hr: number
    freePowerupsCost24hr: number
    createdAt: number
    rpcErrorStats: string
    _count: StatsCountAggregateOutputType | null
    _avg: StatsAvgAggregateOutputType | null
    _sum: StatsSumAggregateOutputType | null
    _min: StatsMinAggregateOutputType | null
    _max: StatsMaxAggregateOutputType | null
  }

  type GetStatsGroupByPayload<T extends StatsGroupByArgs> = Promise<
    Array<
      PickArray<StatsGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof StatsGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], StatsGroupByOutputType[P]> 
            : GetScalarType<T[P], StatsGroupByOutputType[P]>
        }
      > 
    >


  export type StatsSelect = {
    id?: boolean
    owners?: boolean
    totalWatched?: boolean
    totalDeposited?: boolean
    internalEOSBal?: boolean
    eosBal?: boolean
    autopowerups24hr?: boolean
    autopowerupCost24hr?: boolean
    autobuyram24hr?: boolean
    autopowerupfees24hr?: boolean
    autobuyramfees24hr?: boolean
    autobuyramCost24hr?: boolean
    registeredUsersTotal?: boolean
    activeTgUsers?: boolean
    activeDiscordUsers?: boolean
    freePowerups24hr?: boolean
    freePowerupsCost24hr?: boolean
    createdAt?: boolean
    rpcErrorStats?: boolean
  }

  export type StatsGetPayload<
    S extends boolean | null | undefined | StatsArgs,
    U = keyof S
      > = S extends true
        ? Stats
    : S extends undefined
    ? never
    : S extends StatsArgs | StatsFindManyArgs
    ?'include' extends U
    ? Stats 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Stats ?Stats [P]
  : 
     never
  } 
    : Stats
  : Stats


  type StatsCountArgs = Merge<
    Omit<StatsFindManyArgs, 'select' | 'include'> & {
      select?: StatsCountAggregateInputType | true
    }
  >

  export interface StatsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Stats that matches the filter.
     * @param {StatsFindUniqueArgs} args - Arguments to find a Stats
     * @example
     * // Get one Stats
     * const stats = await prisma.stats.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StatsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, StatsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Stats'> extends True ? CheckSelect<T, Prisma__StatsClient<Stats>, Prisma__StatsClient<StatsGetPayload<T>>> : CheckSelect<T, Prisma__StatsClient<Stats | null >, Prisma__StatsClient<StatsGetPayload<T> | null >>

    /**
     * Find the first Stats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatsFindFirstArgs} args - Arguments to find a Stats
     * @example
     * // Get one Stats
     * const stats = await prisma.stats.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StatsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, StatsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Stats'> extends True ? CheckSelect<T, Prisma__StatsClient<Stats>, Prisma__StatsClient<StatsGetPayload<T>>> : CheckSelect<T, Prisma__StatsClient<Stats | null >, Prisma__StatsClient<StatsGetPayload<T> | null >>

    /**
     * Find zero or more Stats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stats
     * const stats = await prisma.stats.findMany()
     * 
     * // Get first 10 Stats
     * const stats = await prisma.stats.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statsWithIdOnly = await prisma.stats.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StatsFindManyArgs>(
      args?: SelectSubset<T, StatsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Stats>>, PrismaPromise<Array<StatsGetPayload<T>>>>

    /**
     * Create a Stats.
     * @param {StatsCreateArgs} args - Arguments to create a Stats.
     * @example
     * // Create one Stats
     * const Stats = await prisma.stats.create({
     *   data: {
     *     // ... data to create a Stats
     *   }
     * })
     * 
    **/
    create<T extends StatsCreateArgs>(
      args: SelectSubset<T, StatsCreateArgs>
    ): CheckSelect<T, Prisma__StatsClient<Stats>, Prisma__StatsClient<StatsGetPayload<T>>>

    /**
     * Delete a Stats.
     * @param {StatsDeleteArgs} args - Arguments to delete one Stats.
     * @example
     * // Delete one Stats
     * const Stats = await prisma.stats.delete({
     *   where: {
     *     // ... filter to delete one Stats
     *   }
     * })
     * 
    **/
    delete<T extends StatsDeleteArgs>(
      args: SelectSubset<T, StatsDeleteArgs>
    ): CheckSelect<T, Prisma__StatsClient<Stats>, Prisma__StatsClient<StatsGetPayload<T>>>

    /**
     * Update one Stats.
     * @param {StatsUpdateArgs} args - Arguments to update one Stats.
     * @example
     * // Update one Stats
     * const stats = await prisma.stats.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StatsUpdateArgs>(
      args: SelectSubset<T, StatsUpdateArgs>
    ): CheckSelect<T, Prisma__StatsClient<Stats>, Prisma__StatsClient<StatsGetPayload<T>>>

    /**
     * Delete zero or more Stats.
     * @param {StatsDeleteManyArgs} args - Arguments to filter Stats to delete.
     * @example
     * // Delete a few Stats
     * const { count } = await prisma.stats.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StatsDeleteManyArgs>(
      args?: SelectSubset<T, StatsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stats
     * const stats = await prisma.stats.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StatsUpdateManyArgs>(
      args: SelectSubset<T, StatsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Stats.
     * @param {StatsUpsertArgs} args - Arguments to update or create a Stats.
     * @example
     * // Update or create a Stats
     * const stats = await prisma.stats.upsert({
     *   create: {
     *     // ... data to create a Stats
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Stats we want to update
     *   }
     * })
    **/
    upsert<T extends StatsUpsertArgs>(
      args: SelectSubset<T, StatsUpsertArgs>
    ): CheckSelect<T, Prisma__StatsClient<Stats>, Prisma__StatsClient<StatsGetPayload<T>>>

    /**
     * Count the number of Stats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatsCountArgs} args - Arguments to filter Stats to count.
     * @example
     * // Count the number of Stats
     * const count = await prisma.stats.count({
     *   where: {
     *     // ... the filter for the Stats we want to count
     *   }
     * })
    **/
    count<T extends StatsCountArgs>(
      args?: Subset<T, StatsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Stats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatsAggregateArgs>(args: Subset<T, StatsAggregateArgs>): PrismaPromise<GetStatsAggregateType<T>>

    /**
     * Group by Stats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatsGroupByArgs['orderBy'] }
        : { orderBy?: StatsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatsGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Stats.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__StatsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Stats findUnique
   */
  export type StatsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Stats
     * 
    **/
    select?: StatsSelect | null
    /**
     * Throw an Error if a Stats can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Stats to fetch.
     * 
    **/
    where: StatsWhereUniqueInput
  }


  /**
   * Stats findFirst
   */
  export type StatsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Stats
     * 
    **/
    select?: StatsSelect | null
    /**
     * Throw an Error if a Stats can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Stats to fetch.
     * 
    **/
    where?: StatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stats to fetch.
     * 
    **/
    orderBy?: Enumerable<StatsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stats.
     * 
    **/
    cursor?: StatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stats from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stats.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stats.
     * 
    **/
    distinct?: Enumerable<StatsScalarFieldEnum>
  }


  /**
   * Stats findMany
   */
  export type StatsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Stats
     * 
    **/
    select?: StatsSelect | null
    /**
     * Filter, which Stats to fetch.
     * 
    **/
    where?: StatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stats to fetch.
     * 
    **/
    orderBy?: Enumerable<StatsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stats.
     * 
    **/
    cursor?: StatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stats from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stats.
     * 
    **/
    skip?: number
    distinct?: Enumerable<StatsScalarFieldEnum>
  }


  /**
   * Stats create
   */
  export type StatsCreateArgs = {
    /**
     * Select specific fields to fetch from the Stats
     * 
    **/
    select?: StatsSelect | null
    /**
     * The data needed to create a Stats.
     * 
    **/
    data: XOR<StatsCreateInput, StatsUncheckedCreateInput>
  }


  /**
   * Stats update
   */
  export type StatsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Stats
     * 
    **/
    select?: StatsSelect | null
    /**
     * The data needed to update a Stats.
     * 
    **/
    data: XOR<StatsUpdateInput, StatsUncheckedUpdateInput>
    /**
     * Choose, which Stats to update.
     * 
    **/
    where: StatsWhereUniqueInput
  }


  /**
   * Stats updateMany
   */
  export type StatsUpdateManyArgs = {
    data: XOR<StatsUpdateManyMutationInput, StatsUncheckedUpdateManyInput>
    where?: StatsWhereInput
  }


  /**
   * Stats upsert
   */
  export type StatsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Stats
     * 
    **/
    select?: StatsSelect | null
    /**
     * The filter to search for the Stats to update in case it exists.
     * 
    **/
    where: StatsWhereUniqueInput
    /**
     * In case the Stats found by the `where` argument doesn't exist, create a new Stats with this data.
     * 
    **/
    create: XOR<StatsCreateInput, StatsUncheckedCreateInput>
    /**
     * In case the Stats was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<StatsUpdateInput, StatsUncheckedUpdateInput>
  }


  /**
   * Stats delete
   */
  export type StatsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Stats
     * 
    **/
    select?: StatsSelect | null
    /**
     * Filter which Stats to delete.
     * 
    **/
    where: StatsWhereUniqueInput
  }


  /**
   * Stats deleteMany
   */
  export type StatsDeleteManyArgs = {
    where?: StatsWhereInput
  }


  /**
   * Stats without action
   */
  export type StatsArgs = {
    /**
     * Select specific fields to fetch from the Stats
     * 
    **/
    select?: StatsSelect | null
  }



  /**
   * Model rpcErrors
   */


  export type AggregateRpcErrors = {
    _count: RpcErrorsCountAggregateOutputType | null
    count: RpcErrorsCountAggregateOutputType | null
    _avg: RpcErrorsAvgAggregateOutputType | null
    avg: RpcErrorsAvgAggregateOutputType | null
    _sum: RpcErrorsSumAggregateOutputType | null
    sum: RpcErrorsSumAggregateOutputType | null
    _min: RpcErrorsMinAggregateOutputType | null
    min: RpcErrorsMinAggregateOutputType | null
    _max: RpcErrorsMaxAggregateOutputType | null
    max: RpcErrorsMaxAggregateOutputType | null
  }

  export type RpcErrorsAvgAggregateOutputType = {
    time: number | null
  }

  export type RpcErrorsSumAggregateOutputType = {
    time: number | null
  }

  export type RpcErrorsMinAggregateOutputType = {
    id: string | null
    time: number | null
    endpoint: string | null
    error: string | null
  }

  export type RpcErrorsMaxAggregateOutputType = {
    id: string | null
    time: number | null
    endpoint: string | null
    error: string | null
  }

  export type RpcErrorsCountAggregateOutputType = {
    id: number
    time: number
    endpoint: number
    error: number
    _all: number
  }


  export type RpcErrorsAvgAggregateInputType = {
    time?: true
  }

  export type RpcErrorsSumAggregateInputType = {
    time?: true
  }

  export type RpcErrorsMinAggregateInputType = {
    id?: true
    time?: true
    endpoint?: true
    error?: true
  }

  export type RpcErrorsMaxAggregateInputType = {
    id?: true
    time?: true
    endpoint?: true
    error?: true
  }

  export type RpcErrorsCountAggregateInputType = {
    id?: true
    time?: true
    endpoint?: true
    error?: true
    _all?: true
  }

  export type RpcErrorsAggregateArgs = {
    /**
     * Filter which rpcErrors to aggregate.
     * 
    **/
    where?: rpcErrorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rpcErrors to fetch.
     * 
    **/
    orderBy?: Enumerable<rpcErrorsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: rpcErrorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rpcErrors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rpcErrors.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned rpcErrors
    **/
    _count?: true | RpcErrorsCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | RpcErrorsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RpcErrorsAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: RpcErrorsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RpcErrorsSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: RpcErrorsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RpcErrorsMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: RpcErrorsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RpcErrorsMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: RpcErrorsMaxAggregateInputType
  }

  export type GetRpcErrorsAggregateType<T extends RpcErrorsAggregateArgs> = {
        [P in keyof T & keyof AggregateRpcErrors]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRpcErrors[P]>
      : GetScalarType<T[P], AggregateRpcErrors[P]>
  }


    
    
  export type RpcErrorsGroupByArgs = {
    where?: rpcErrorsWhereInput
    orderBy?: Enumerable<rpcErrorsOrderByInput>
    by: Array<RpcErrorsScalarFieldEnum>
    having?: rpcErrorsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RpcErrorsCountAggregateInputType | true
    _avg?: RpcErrorsAvgAggregateInputType
    _sum?: RpcErrorsSumAggregateInputType
    _min?: RpcErrorsMinAggregateInputType
    _max?: RpcErrorsMaxAggregateInputType
  }


  export type RpcErrorsGroupByOutputType = {
    id: string
    time: number
    endpoint: string
    error: string
    _count: RpcErrorsCountAggregateOutputType | null
    _avg: RpcErrorsAvgAggregateOutputType | null
    _sum: RpcErrorsSumAggregateOutputType | null
    _min: RpcErrorsMinAggregateOutputType | null
    _max: RpcErrorsMaxAggregateOutputType | null
  }

  type GetRpcErrorsGroupByPayload<T extends RpcErrorsGroupByArgs> = Promise<
    Array<
      PickArray<RpcErrorsGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof RpcErrorsGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], RpcErrorsGroupByOutputType[P]> 
            : GetScalarType<T[P], RpcErrorsGroupByOutputType[P]>
        }
      > 
    >


  export type rpcErrorsSelect = {
    id?: boolean
    time?: boolean
    endpoint?: boolean
    error?: boolean
  }

  export type rpcErrorsGetPayload<
    S extends boolean | null | undefined | rpcErrorsArgs,
    U = keyof S
      > = S extends true
        ? rpcErrors
    : S extends undefined
    ? never
    : S extends rpcErrorsArgs | rpcErrorsFindManyArgs
    ?'include' extends U
    ? rpcErrors 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof rpcErrors ?rpcErrors [P]
  : 
     never
  } 
    : rpcErrors
  : rpcErrors


  type rpcErrorsCountArgs = Merge<
    Omit<rpcErrorsFindManyArgs, 'select' | 'include'> & {
      select?: RpcErrorsCountAggregateInputType | true
    }
  >

  export interface rpcErrorsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one RpcErrors that matches the filter.
     * @param {rpcErrorsFindUniqueArgs} args - Arguments to find a RpcErrors
     * @example
     * // Get one RpcErrors
     * const rpcErrors = await prisma.rpcErrors.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends rpcErrorsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, rpcErrorsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'rpcErrors'> extends True ? CheckSelect<T, Prisma__rpcErrorsClient<rpcErrors>, Prisma__rpcErrorsClient<rpcErrorsGetPayload<T>>> : CheckSelect<T, Prisma__rpcErrorsClient<rpcErrors | null >, Prisma__rpcErrorsClient<rpcErrorsGetPayload<T> | null >>

    /**
     * Find the first RpcErrors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rpcErrorsFindFirstArgs} args - Arguments to find a RpcErrors
     * @example
     * // Get one RpcErrors
     * const rpcErrors = await prisma.rpcErrors.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends rpcErrorsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, rpcErrorsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'rpcErrors'> extends True ? CheckSelect<T, Prisma__rpcErrorsClient<rpcErrors>, Prisma__rpcErrorsClient<rpcErrorsGetPayload<T>>> : CheckSelect<T, Prisma__rpcErrorsClient<rpcErrors | null >, Prisma__rpcErrorsClient<rpcErrorsGetPayload<T> | null >>

    /**
     * Find zero or more RpcErrors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rpcErrorsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RpcErrors
     * const rpcErrors = await prisma.rpcErrors.findMany()
     * 
     * // Get first 10 RpcErrors
     * const rpcErrors = await prisma.rpcErrors.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rpcErrorsWithIdOnly = await prisma.rpcErrors.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends rpcErrorsFindManyArgs>(
      args?: SelectSubset<T, rpcErrorsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<rpcErrors>>, PrismaPromise<Array<rpcErrorsGetPayload<T>>>>

    /**
     * Create a RpcErrors.
     * @param {rpcErrorsCreateArgs} args - Arguments to create a RpcErrors.
     * @example
     * // Create one RpcErrors
     * const RpcErrors = await prisma.rpcErrors.create({
     *   data: {
     *     // ... data to create a RpcErrors
     *   }
     * })
     * 
    **/
    create<T extends rpcErrorsCreateArgs>(
      args: SelectSubset<T, rpcErrorsCreateArgs>
    ): CheckSelect<T, Prisma__rpcErrorsClient<rpcErrors>, Prisma__rpcErrorsClient<rpcErrorsGetPayload<T>>>

    /**
     * Delete a RpcErrors.
     * @param {rpcErrorsDeleteArgs} args - Arguments to delete one RpcErrors.
     * @example
     * // Delete one RpcErrors
     * const RpcErrors = await prisma.rpcErrors.delete({
     *   where: {
     *     // ... filter to delete one RpcErrors
     *   }
     * })
     * 
    **/
    delete<T extends rpcErrorsDeleteArgs>(
      args: SelectSubset<T, rpcErrorsDeleteArgs>
    ): CheckSelect<T, Prisma__rpcErrorsClient<rpcErrors>, Prisma__rpcErrorsClient<rpcErrorsGetPayload<T>>>

    /**
     * Update one RpcErrors.
     * @param {rpcErrorsUpdateArgs} args - Arguments to update one RpcErrors.
     * @example
     * // Update one RpcErrors
     * const rpcErrors = await prisma.rpcErrors.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends rpcErrorsUpdateArgs>(
      args: SelectSubset<T, rpcErrorsUpdateArgs>
    ): CheckSelect<T, Prisma__rpcErrorsClient<rpcErrors>, Prisma__rpcErrorsClient<rpcErrorsGetPayload<T>>>

    /**
     * Delete zero or more RpcErrors.
     * @param {rpcErrorsDeleteManyArgs} args - Arguments to filter RpcErrors to delete.
     * @example
     * // Delete a few RpcErrors
     * const { count } = await prisma.rpcErrors.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends rpcErrorsDeleteManyArgs>(
      args?: SelectSubset<T, rpcErrorsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more RpcErrors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rpcErrorsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RpcErrors
     * const rpcErrors = await prisma.rpcErrors.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends rpcErrorsUpdateManyArgs>(
      args: SelectSubset<T, rpcErrorsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one RpcErrors.
     * @param {rpcErrorsUpsertArgs} args - Arguments to update or create a RpcErrors.
     * @example
     * // Update or create a RpcErrors
     * const rpcErrors = await prisma.rpcErrors.upsert({
     *   create: {
     *     // ... data to create a RpcErrors
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RpcErrors we want to update
     *   }
     * })
    **/
    upsert<T extends rpcErrorsUpsertArgs>(
      args: SelectSubset<T, rpcErrorsUpsertArgs>
    ): CheckSelect<T, Prisma__rpcErrorsClient<rpcErrors>, Prisma__rpcErrorsClient<rpcErrorsGetPayload<T>>>

    /**
     * Count the number of RpcErrors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rpcErrorsCountArgs} args - Arguments to filter RpcErrors to count.
     * @example
     * // Count the number of RpcErrors
     * const count = await prisma.rpcErrors.count({
     *   where: {
     *     // ... the filter for the RpcErrors we want to count
     *   }
     * })
    **/
    count<T extends rpcErrorsCountArgs>(
      args?: Subset<T, rpcErrorsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RpcErrorsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RpcErrors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RpcErrorsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RpcErrorsAggregateArgs>(args: Subset<T, RpcErrorsAggregateArgs>): PrismaPromise<GetRpcErrorsAggregateType<T>>

    /**
     * Group by RpcErrors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RpcErrorsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RpcErrorsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RpcErrorsGroupByArgs['orderBy'] }
        : { orderBy?: RpcErrorsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RpcErrorsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRpcErrorsGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for rpcErrors.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__rpcErrorsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * rpcErrors findUnique
   */
  export type rpcErrorsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the rpcErrors
     * 
    **/
    select?: rpcErrorsSelect | null
    /**
     * Throw an Error if a rpcErrors can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which rpcErrors to fetch.
     * 
    **/
    where: rpcErrorsWhereUniqueInput
  }


  /**
   * rpcErrors findFirst
   */
  export type rpcErrorsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the rpcErrors
     * 
    **/
    select?: rpcErrorsSelect | null
    /**
     * Throw an Error if a rpcErrors can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which rpcErrors to fetch.
     * 
    **/
    where?: rpcErrorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rpcErrors to fetch.
     * 
    **/
    orderBy?: Enumerable<rpcErrorsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for rpcErrors.
     * 
    **/
    cursor?: rpcErrorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rpcErrors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rpcErrors.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of rpcErrors.
     * 
    **/
    distinct?: Enumerable<RpcErrorsScalarFieldEnum>
  }


  /**
   * rpcErrors findMany
   */
  export type rpcErrorsFindManyArgs = {
    /**
     * Select specific fields to fetch from the rpcErrors
     * 
    **/
    select?: rpcErrorsSelect | null
    /**
     * Filter, which rpcErrors to fetch.
     * 
    **/
    where?: rpcErrorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rpcErrors to fetch.
     * 
    **/
    orderBy?: Enumerable<rpcErrorsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing rpcErrors.
     * 
    **/
    cursor?: rpcErrorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rpcErrors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rpcErrors.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RpcErrorsScalarFieldEnum>
  }


  /**
   * rpcErrors create
   */
  export type rpcErrorsCreateArgs = {
    /**
     * Select specific fields to fetch from the rpcErrors
     * 
    **/
    select?: rpcErrorsSelect | null
    /**
     * The data needed to create a rpcErrors.
     * 
    **/
    data: XOR<rpcErrorsCreateInput, rpcErrorsUncheckedCreateInput>
  }


  /**
   * rpcErrors update
   */
  export type rpcErrorsUpdateArgs = {
    /**
     * Select specific fields to fetch from the rpcErrors
     * 
    **/
    select?: rpcErrorsSelect | null
    /**
     * The data needed to update a rpcErrors.
     * 
    **/
    data: XOR<rpcErrorsUpdateInput, rpcErrorsUncheckedUpdateInput>
    /**
     * Choose, which rpcErrors to update.
     * 
    **/
    where: rpcErrorsWhereUniqueInput
  }


  /**
   * rpcErrors updateMany
   */
  export type rpcErrorsUpdateManyArgs = {
    data: XOR<rpcErrorsUpdateManyMutationInput, rpcErrorsUncheckedUpdateManyInput>
    where?: rpcErrorsWhereInput
  }


  /**
   * rpcErrors upsert
   */
  export type rpcErrorsUpsertArgs = {
    /**
     * Select specific fields to fetch from the rpcErrors
     * 
    **/
    select?: rpcErrorsSelect | null
    /**
     * The filter to search for the rpcErrors to update in case it exists.
     * 
    **/
    where: rpcErrorsWhereUniqueInput
    /**
     * In case the rpcErrors found by the `where` argument doesn't exist, create a new rpcErrors with this data.
     * 
    **/
    create: XOR<rpcErrorsCreateInput, rpcErrorsUncheckedCreateInput>
    /**
     * In case the rpcErrors was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<rpcErrorsUpdateInput, rpcErrorsUncheckedUpdateInput>
  }


  /**
   * rpcErrors delete
   */
  export type rpcErrorsDeleteArgs = {
    /**
     * Select specific fields to fetch from the rpcErrors
     * 
    **/
    select?: rpcErrorsSelect | null
    /**
     * Filter which rpcErrors to delete.
     * 
    **/
    where: rpcErrorsWhereUniqueInput
  }


  /**
   * rpcErrors deleteMany
   */
  export type rpcErrorsDeleteManyArgs = {
    where?: rpcErrorsWhereInput
  }


  /**
   * rpcErrors without action
   */
  export type rpcErrorsArgs = {
    /**
     * Select specific fields to fetch from the rpcErrors
     * 
    **/
    select?: rpcErrorsSelect | null
  }



  /**
   * Model rpcSuccess
   */


  export type AggregateRpcSuccess = {
    _count: RpcSuccessCountAggregateOutputType | null
    count: RpcSuccessCountAggregateOutputType | null
    _avg: RpcSuccessAvgAggregateOutputType | null
    avg: RpcSuccessAvgAggregateOutputType | null
    _sum: RpcSuccessSumAggregateOutputType | null
    sum: RpcSuccessSumAggregateOutputType | null
    _min: RpcSuccessMinAggregateOutputType | null
    min: RpcSuccessMinAggregateOutputType | null
    _max: RpcSuccessMaxAggregateOutputType | null
    max: RpcSuccessMaxAggregateOutputType | null
  }

  export type RpcSuccessAvgAggregateOutputType = {
    time: number | null
  }

  export type RpcSuccessSumAggregateOutputType = {
    time: number | null
  }

  export type RpcSuccessMinAggregateOutputType = {
    id: string | null
    time: number | null
    endpoint: string | null
    error: string | null
  }

  export type RpcSuccessMaxAggregateOutputType = {
    id: string | null
    time: number | null
    endpoint: string | null
    error: string | null
  }

  export type RpcSuccessCountAggregateOutputType = {
    id: number
    time: number
    endpoint: number
    error: number
    _all: number
  }


  export type RpcSuccessAvgAggregateInputType = {
    time?: true
  }

  export type RpcSuccessSumAggregateInputType = {
    time?: true
  }

  export type RpcSuccessMinAggregateInputType = {
    id?: true
    time?: true
    endpoint?: true
    error?: true
  }

  export type RpcSuccessMaxAggregateInputType = {
    id?: true
    time?: true
    endpoint?: true
    error?: true
  }

  export type RpcSuccessCountAggregateInputType = {
    id?: true
    time?: true
    endpoint?: true
    error?: true
    _all?: true
  }

  export type RpcSuccessAggregateArgs = {
    /**
     * Filter which rpcSuccess to aggregate.
     * 
    **/
    where?: rpcSuccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rpcSuccesses to fetch.
     * 
    **/
    orderBy?: Enumerable<rpcSuccessOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: rpcSuccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rpcSuccesses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rpcSuccesses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned rpcSuccesses
    **/
    _count?: true | RpcSuccessCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | RpcSuccessCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RpcSuccessAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: RpcSuccessAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RpcSuccessSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: RpcSuccessSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RpcSuccessMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: RpcSuccessMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RpcSuccessMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: RpcSuccessMaxAggregateInputType
  }

  export type GetRpcSuccessAggregateType<T extends RpcSuccessAggregateArgs> = {
        [P in keyof T & keyof AggregateRpcSuccess]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRpcSuccess[P]>
      : GetScalarType<T[P], AggregateRpcSuccess[P]>
  }


    
    
  export type RpcSuccessGroupByArgs = {
    where?: rpcSuccessWhereInput
    orderBy?: Enumerable<rpcSuccessOrderByInput>
    by: Array<RpcSuccessScalarFieldEnum>
    having?: rpcSuccessScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RpcSuccessCountAggregateInputType | true
    _avg?: RpcSuccessAvgAggregateInputType
    _sum?: RpcSuccessSumAggregateInputType
    _min?: RpcSuccessMinAggregateInputType
    _max?: RpcSuccessMaxAggregateInputType
  }


  export type RpcSuccessGroupByOutputType = {
    id: string
    time: number
    endpoint: string
    error: string
    _count: RpcSuccessCountAggregateOutputType | null
    _avg: RpcSuccessAvgAggregateOutputType | null
    _sum: RpcSuccessSumAggregateOutputType | null
    _min: RpcSuccessMinAggregateOutputType | null
    _max: RpcSuccessMaxAggregateOutputType | null
  }

  type GetRpcSuccessGroupByPayload<T extends RpcSuccessGroupByArgs> = Promise<
    Array<
      PickArray<RpcSuccessGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof RpcSuccessGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], RpcSuccessGroupByOutputType[P]> 
            : GetScalarType<T[P], RpcSuccessGroupByOutputType[P]>
        }
      > 
    >


  export type rpcSuccessSelect = {
    id?: boolean
    time?: boolean
    endpoint?: boolean
    error?: boolean
  }

  export type rpcSuccessGetPayload<
    S extends boolean | null | undefined | rpcSuccessArgs,
    U = keyof S
      > = S extends true
        ? rpcSuccess
    : S extends undefined
    ? never
    : S extends rpcSuccessArgs | rpcSuccessFindManyArgs
    ?'include' extends U
    ? rpcSuccess 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof rpcSuccess ?rpcSuccess [P]
  : 
     never
  } 
    : rpcSuccess
  : rpcSuccess


  type rpcSuccessCountArgs = Merge<
    Omit<rpcSuccessFindManyArgs, 'select' | 'include'> & {
      select?: RpcSuccessCountAggregateInputType | true
    }
  >

  export interface rpcSuccessDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one RpcSuccess that matches the filter.
     * @param {rpcSuccessFindUniqueArgs} args - Arguments to find a RpcSuccess
     * @example
     * // Get one RpcSuccess
     * const rpcSuccess = await prisma.rpcSuccess.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends rpcSuccessFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, rpcSuccessFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'rpcSuccess'> extends True ? CheckSelect<T, Prisma__rpcSuccessClient<rpcSuccess>, Prisma__rpcSuccessClient<rpcSuccessGetPayload<T>>> : CheckSelect<T, Prisma__rpcSuccessClient<rpcSuccess | null >, Prisma__rpcSuccessClient<rpcSuccessGetPayload<T> | null >>

    /**
     * Find the first RpcSuccess that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rpcSuccessFindFirstArgs} args - Arguments to find a RpcSuccess
     * @example
     * // Get one RpcSuccess
     * const rpcSuccess = await prisma.rpcSuccess.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends rpcSuccessFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, rpcSuccessFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'rpcSuccess'> extends True ? CheckSelect<T, Prisma__rpcSuccessClient<rpcSuccess>, Prisma__rpcSuccessClient<rpcSuccessGetPayload<T>>> : CheckSelect<T, Prisma__rpcSuccessClient<rpcSuccess | null >, Prisma__rpcSuccessClient<rpcSuccessGetPayload<T> | null >>

    /**
     * Find zero or more RpcSuccesses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rpcSuccessFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RpcSuccesses
     * const rpcSuccesses = await prisma.rpcSuccess.findMany()
     * 
     * // Get first 10 RpcSuccesses
     * const rpcSuccesses = await prisma.rpcSuccess.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rpcSuccessWithIdOnly = await prisma.rpcSuccess.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends rpcSuccessFindManyArgs>(
      args?: SelectSubset<T, rpcSuccessFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<rpcSuccess>>, PrismaPromise<Array<rpcSuccessGetPayload<T>>>>

    /**
     * Create a RpcSuccess.
     * @param {rpcSuccessCreateArgs} args - Arguments to create a RpcSuccess.
     * @example
     * // Create one RpcSuccess
     * const RpcSuccess = await prisma.rpcSuccess.create({
     *   data: {
     *     // ... data to create a RpcSuccess
     *   }
     * })
     * 
    **/
    create<T extends rpcSuccessCreateArgs>(
      args: SelectSubset<T, rpcSuccessCreateArgs>
    ): CheckSelect<T, Prisma__rpcSuccessClient<rpcSuccess>, Prisma__rpcSuccessClient<rpcSuccessGetPayload<T>>>

    /**
     * Delete a RpcSuccess.
     * @param {rpcSuccessDeleteArgs} args - Arguments to delete one RpcSuccess.
     * @example
     * // Delete one RpcSuccess
     * const RpcSuccess = await prisma.rpcSuccess.delete({
     *   where: {
     *     // ... filter to delete one RpcSuccess
     *   }
     * })
     * 
    **/
    delete<T extends rpcSuccessDeleteArgs>(
      args: SelectSubset<T, rpcSuccessDeleteArgs>
    ): CheckSelect<T, Prisma__rpcSuccessClient<rpcSuccess>, Prisma__rpcSuccessClient<rpcSuccessGetPayload<T>>>

    /**
     * Update one RpcSuccess.
     * @param {rpcSuccessUpdateArgs} args - Arguments to update one RpcSuccess.
     * @example
     * // Update one RpcSuccess
     * const rpcSuccess = await prisma.rpcSuccess.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends rpcSuccessUpdateArgs>(
      args: SelectSubset<T, rpcSuccessUpdateArgs>
    ): CheckSelect<T, Prisma__rpcSuccessClient<rpcSuccess>, Prisma__rpcSuccessClient<rpcSuccessGetPayload<T>>>

    /**
     * Delete zero or more RpcSuccesses.
     * @param {rpcSuccessDeleteManyArgs} args - Arguments to filter RpcSuccesses to delete.
     * @example
     * // Delete a few RpcSuccesses
     * const { count } = await prisma.rpcSuccess.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends rpcSuccessDeleteManyArgs>(
      args?: SelectSubset<T, rpcSuccessDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more RpcSuccesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rpcSuccessUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RpcSuccesses
     * const rpcSuccess = await prisma.rpcSuccess.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends rpcSuccessUpdateManyArgs>(
      args: SelectSubset<T, rpcSuccessUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one RpcSuccess.
     * @param {rpcSuccessUpsertArgs} args - Arguments to update or create a RpcSuccess.
     * @example
     * // Update or create a RpcSuccess
     * const rpcSuccess = await prisma.rpcSuccess.upsert({
     *   create: {
     *     // ... data to create a RpcSuccess
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RpcSuccess we want to update
     *   }
     * })
    **/
    upsert<T extends rpcSuccessUpsertArgs>(
      args: SelectSubset<T, rpcSuccessUpsertArgs>
    ): CheckSelect<T, Prisma__rpcSuccessClient<rpcSuccess>, Prisma__rpcSuccessClient<rpcSuccessGetPayload<T>>>

    /**
     * Count the number of RpcSuccesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rpcSuccessCountArgs} args - Arguments to filter RpcSuccesses to count.
     * @example
     * // Count the number of RpcSuccesses
     * const count = await prisma.rpcSuccess.count({
     *   where: {
     *     // ... the filter for the RpcSuccesses we want to count
     *   }
     * })
    **/
    count<T extends rpcSuccessCountArgs>(
      args?: Subset<T, rpcSuccessCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RpcSuccessCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RpcSuccess.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RpcSuccessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RpcSuccessAggregateArgs>(args: Subset<T, RpcSuccessAggregateArgs>): PrismaPromise<GetRpcSuccessAggregateType<T>>

    /**
     * Group by RpcSuccess.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RpcSuccessGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RpcSuccessGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RpcSuccessGroupByArgs['orderBy'] }
        : { orderBy?: RpcSuccessGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RpcSuccessGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRpcSuccessGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for rpcSuccess.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__rpcSuccessClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * rpcSuccess findUnique
   */
  export type rpcSuccessFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the rpcSuccess
     * 
    **/
    select?: rpcSuccessSelect | null
    /**
     * Throw an Error if a rpcSuccess can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which rpcSuccess to fetch.
     * 
    **/
    where: rpcSuccessWhereUniqueInput
  }


  /**
   * rpcSuccess findFirst
   */
  export type rpcSuccessFindFirstArgs = {
    /**
     * Select specific fields to fetch from the rpcSuccess
     * 
    **/
    select?: rpcSuccessSelect | null
    /**
     * Throw an Error if a rpcSuccess can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which rpcSuccess to fetch.
     * 
    **/
    where?: rpcSuccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rpcSuccesses to fetch.
     * 
    **/
    orderBy?: Enumerable<rpcSuccessOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for rpcSuccesses.
     * 
    **/
    cursor?: rpcSuccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rpcSuccesses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rpcSuccesses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of rpcSuccesses.
     * 
    **/
    distinct?: Enumerable<RpcSuccessScalarFieldEnum>
  }


  /**
   * rpcSuccess findMany
   */
  export type rpcSuccessFindManyArgs = {
    /**
     * Select specific fields to fetch from the rpcSuccess
     * 
    **/
    select?: rpcSuccessSelect | null
    /**
     * Filter, which rpcSuccesses to fetch.
     * 
    **/
    where?: rpcSuccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rpcSuccesses to fetch.
     * 
    **/
    orderBy?: Enumerable<rpcSuccessOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing rpcSuccesses.
     * 
    **/
    cursor?: rpcSuccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rpcSuccesses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rpcSuccesses.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RpcSuccessScalarFieldEnum>
  }


  /**
   * rpcSuccess create
   */
  export type rpcSuccessCreateArgs = {
    /**
     * Select specific fields to fetch from the rpcSuccess
     * 
    **/
    select?: rpcSuccessSelect | null
    /**
     * The data needed to create a rpcSuccess.
     * 
    **/
    data: XOR<rpcSuccessCreateInput, rpcSuccessUncheckedCreateInput>
  }


  /**
   * rpcSuccess update
   */
  export type rpcSuccessUpdateArgs = {
    /**
     * Select specific fields to fetch from the rpcSuccess
     * 
    **/
    select?: rpcSuccessSelect | null
    /**
     * The data needed to update a rpcSuccess.
     * 
    **/
    data: XOR<rpcSuccessUpdateInput, rpcSuccessUncheckedUpdateInput>
    /**
     * Choose, which rpcSuccess to update.
     * 
    **/
    where: rpcSuccessWhereUniqueInput
  }


  /**
   * rpcSuccess updateMany
   */
  export type rpcSuccessUpdateManyArgs = {
    data: XOR<rpcSuccessUpdateManyMutationInput, rpcSuccessUncheckedUpdateManyInput>
    where?: rpcSuccessWhereInput
  }


  /**
   * rpcSuccess upsert
   */
  export type rpcSuccessUpsertArgs = {
    /**
     * Select specific fields to fetch from the rpcSuccess
     * 
    **/
    select?: rpcSuccessSelect | null
    /**
     * The filter to search for the rpcSuccess to update in case it exists.
     * 
    **/
    where: rpcSuccessWhereUniqueInput
    /**
     * In case the rpcSuccess found by the `where` argument doesn't exist, create a new rpcSuccess with this data.
     * 
    **/
    create: XOR<rpcSuccessCreateInput, rpcSuccessUncheckedCreateInput>
    /**
     * In case the rpcSuccess was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<rpcSuccessUpdateInput, rpcSuccessUncheckedUpdateInput>
  }


  /**
   * rpcSuccess delete
   */
  export type rpcSuccessDeleteArgs = {
    /**
     * Select specific fields to fetch from the rpcSuccess
     * 
    **/
    select?: rpcSuccessSelect | null
    /**
     * Filter which rpcSuccess to delete.
     * 
    **/
    where: rpcSuccessWhereUniqueInput
  }


  /**
   * rpcSuccess deleteMany
   */
  export type rpcSuccessDeleteManyArgs = {
    where?: rpcSuccessWhereInput
  }


  /**
   * rpcSuccess without action
   */
  export type rpcSuccessArgs = {
    /**
     * Select specific fields to fetch from the rpcSuccess
     * 
    **/
    select?: rpcSuccessSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const DopowerupScalarFieldEnum: {
    txid: 'txid',
    receiver: 'receiver',
    payer: 'payer',
    cpu_frac: 'cpu_frac',
    net_frac: 'net_frac',
    time: 'time',
    failed: 'failed',
    reversible: 'reversible',
    userId: 'userId'
  };

  export type DopowerupScalarFieldEnum = (typeof DopowerupScalarFieldEnum)[keyof typeof DopowerupScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    telegramId: 'telegramId',
    telegramHandle: 'telegramHandle',
    eosAccount: 'eosAccount',
    discordId: 'discordId',
    discordHandle: 'discordHandle',
    email: 'email'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CursorScalarFieldEnum: {
    searchString: 'searchString',
    cursor: 'cursor',
    lowBlock: 'lowBlock'
  };

  export type CursorScalarFieldEnum = (typeof CursorScalarFieldEnum)[keyof typeof CursorScalarFieldEnum]


  export const IpblacklistScalarFieldEnum: {
    ip: 'ip',
    reason: 'reason'
  };

  export type IpblacklistScalarFieldEnum = (typeof IpblacklistScalarFieldEnum)[keyof typeof IpblacklistScalarFieldEnum]


  export const BlacklistScalarFieldEnum: {
    account: 'account',
    reason: 'reason'
  };

  export type BlacklistScalarFieldEnum = (typeof BlacklistScalarFieldEnum)[keyof typeof BlacklistScalarFieldEnum]


  export const LogpowerupScalarFieldEnum: {
    seq: 'seq',
    txid: 'txid',
    action: 'action',
    cost: 'cost',
    fee: 'fee',
    received_cpu_ms: 'received_cpu_ms',
    received_net_kb: 'received_net_kb',
    receiver: 'receiver',
    payer: 'payer',
    total_billed: 'total_billed',
    blockTime: 'blockTime'
  };

  export type LogpowerupScalarFieldEnum = (typeof LogpowerupScalarFieldEnum)[keyof typeof LogpowerupScalarFieldEnum]


  export const LogbuyramScalarFieldEnum: {
    seq: 'seq',
    txid: 'txid',
    action: 'action',
    cost: 'cost',
    fee: 'fee',
    received_ram_kb: 'received_ram_kb',
    receiver: 'receiver',
    payer: 'payer',
    total_billed: 'total_billed',
    blockTime: 'blockTime'
  };

  export type LogbuyramScalarFieldEnum = (typeof LogbuyramScalarFieldEnum)[keyof typeof LogbuyramScalarFieldEnum]


  export const TransferScalarFieldEnum: {
    seq: 'seq',
    from: 'from',
    to: 'to',
    quantity: 'quantity',
    memo: 'memo',
    symbol: 'symbol',
    txid: 'txid',
    blockTime: 'blockTime'
  };

  export type TransferScalarFieldEnum = (typeof TransferScalarFieldEnum)[keyof typeof TransferScalarFieldEnum]


  export const StatsScalarFieldEnum: {
    id: 'id',
    owners: 'owners',
    totalWatched: 'totalWatched',
    totalDeposited: 'totalDeposited',
    internalEOSBal: 'internalEOSBal',
    eosBal: 'eosBal',
    autopowerups24hr: 'autopowerups24hr',
    autopowerupCost24hr: 'autopowerupCost24hr',
    autobuyram24hr: 'autobuyram24hr',
    autopowerupfees24hr: 'autopowerupfees24hr',
    autobuyramfees24hr: 'autobuyramfees24hr',
    autobuyramCost24hr: 'autobuyramCost24hr',
    registeredUsersTotal: 'registeredUsersTotal',
    activeTgUsers: 'activeTgUsers',
    activeDiscordUsers: 'activeDiscordUsers',
    freePowerups24hr: 'freePowerups24hr',
    freePowerupsCost24hr: 'freePowerupsCost24hr',
    createdAt: 'createdAt',
    rpcErrorStats: 'rpcErrorStats'
  };

  export type StatsScalarFieldEnum = (typeof StatsScalarFieldEnum)[keyof typeof StatsScalarFieldEnum]


  export const RpcErrorsScalarFieldEnum: {
    id: 'id',
    time: 'time',
    endpoint: 'endpoint',
    error: 'error'
  };

  export type RpcErrorsScalarFieldEnum = (typeof RpcErrorsScalarFieldEnum)[keyof typeof RpcErrorsScalarFieldEnum]


  export const RpcSuccessScalarFieldEnum: {
    id: 'id',
    time: 'time',
    endpoint: 'endpoint',
    error: 'error'
  };

  export type RpcSuccessScalarFieldEnum = (typeof RpcSuccessScalarFieldEnum)[keyof typeof RpcSuccessScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type DopowerupWhereInput = {
    AND?: Enumerable<DopowerupWhereInput>
    OR?: Enumerable<DopowerupWhereInput>
    NOT?: Enumerable<DopowerupWhereInput>
    txid?: StringFilter | string
    receiver?: StringFilter | string
    payer?: StringFilter | string
    cpu_frac?: IntFilter | number
    net_frac?: IntFilter | number
    time?: IntFilter | number
    failed?: BoolFilter | boolean
    reversible?: BoolFilter | boolean
    User?: XOR<UserRelationFilter, UserWhereInput> | null
    userId?: StringNullableFilter | string | null
  }

  export type DopowerupOrderByInput = {
    txid?: SortOrder
    receiver?: SortOrder
    payer?: SortOrder
    cpu_frac?: SortOrder
    net_frac?: SortOrder
    time?: SortOrder
    failed?: SortOrder
    reversible?: SortOrder
    userId?: SortOrder
  }

  export type DopowerupWhereUniqueInput = {
    txid?: string
  }

  export type DopowerupScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DopowerupScalarWhereWithAggregatesInput>
    OR?: Enumerable<DopowerupScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DopowerupScalarWhereWithAggregatesInput>
    txid?: StringWithAggregatesFilter | string
    receiver?: StringWithAggregatesFilter | string
    payer?: StringWithAggregatesFilter | string
    cpu_frac?: IntWithAggregatesFilter | number
    net_frac?: IntWithAggregatesFilter | number
    time?: IntWithAggregatesFilter | number
    failed?: BoolWithAggregatesFilter | boolean
    reversible?: BoolWithAggregatesFilter | boolean
    userId?: StringNullableWithAggregatesFilter | string | null
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    telegramId?: IntNullableFilter | number | null
    telegramHandle?: StringNullableFilter | string | null
    eosAccount?: StringNullableFilter | string | null
    discordId?: StringNullableFilter | string | null
    discordHandle?: StringNullableFilter | string | null
    freePowerups?: DopowerupListRelationFilter
    email?: StringNullableFilter | string | null
  }

  export type UserOrderByInput = {
    id?: SortOrder
    telegramId?: SortOrder
    telegramHandle?: SortOrder
    eosAccount?: SortOrder
    discordId?: SortOrder
    discordHandle?: SortOrder
    email?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: string
    telegramId?: number
    telegramHandle?: string
    eosAccount?: string
    discordId?: string
    email?: string
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    telegramId?: IntNullableWithAggregatesFilter | number | null
    telegramHandle?: StringNullableWithAggregatesFilter | string | null
    eosAccount?: StringNullableWithAggregatesFilter | string | null
    discordId?: StringNullableWithAggregatesFilter | string | null
    discordHandle?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
  }

  export type CursorWhereInput = {
    AND?: Enumerable<CursorWhereInput>
    OR?: Enumerable<CursorWhereInput>
    NOT?: Enumerable<CursorWhereInput>
    searchString?: StringFilter | string
    cursor?: StringFilter | string
    lowBlock?: IntFilter | number
  }

  export type CursorOrderByInput = {
    searchString?: SortOrder
    cursor?: SortOrder
    lowBlock?: SortOrder
  }

  export type CursorWhereUniqueInput = {
    searchString?: string
  }

  export type CursorScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CursorScalarWhereWithAggregatesInput>
    OR?: Enumerable<CursorScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CursorScalarWhereWithAggregatesInput>
    searchString?: StringWithAggregatesFilter | string
    cursor?: StringWithAggregatesFilter | string
    lowBlock?: IntWithAggregatesFilter | number
  }

  export type ipblacklistWhereInput = {
    AND?: Enumerable<ipblacklistWhereInput>
    OR?: Enumerable<ipblacklistWhereInput>
    NOT?: Enumerable<ipblacklistWhereInput>
    ip?: StringFilter | string
    reason?: StringFilter | string
  }

  export type ipblacklistOrderByInput = {
    ip?: SortOrder
    reason?: SortOrder
  }

  export type ipblacklistWhereUniqueInput = {
    ip?: string
  }

  export type ipblacklistScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ipblacklistScalarWhereWithAggregatesInput>
    OR?: Enumerable<ipblacklistScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ipblacklistScalarWhereWithAggregatesInput>
    ip?: StringWithAggregatesFilter | string
    reason?: StringWithAggregatesFilter | string
  }

  export type blacklistWhereInput = {
    AND?: Enumerable<blacklistWhereInput>
    OR?: Enumerable<blacklistWhereInput>
    NOT?: Enumerable<blacklistWhereInput>
    account?: StringFilter | string
    reason?: StringFilter | string
  }

  export type blacklistOrderByInput = {
    account?: SortOrder
    reason?: SortOrder
  }

  export type blacklistWhereUniqueInput = {
    account?: string
  }

  export type blacklistScalarWhereWithAggregatesInput = {
    AND?: Enumerable<blacklistScalarWhereWithAggregatesInput>
    OR?: Enumerable<blacklistScalarWhereWithAggregatesInput>
    NOT?: Enumerable<blacklistScalarWhereWithAggregatesInput>
    account?: StringWithAggregatesFilter | string
    reason?: StringWithAggregatesFilter | string
  }

  export type LogpowerupWhereInput = {
    AND?: Enumerable<LogpowerupWhereInput>
    OR?: Enumerable<LogpowerupWhereInput>
    NOT?: Enumerable<LogpowerupWhereInput>
    seq?: IntFilter | number
    txid?: StringFilter | string
    action?: StringFilter | string
    cost?: FloatFilter | number
    fee?: FloatFilter | number
    received_cpu_ms?: FloatFilter | number
    received_net_kb?: FloatFilter | number
    receiver?: StringFilter | string
    payer?: StringFilter | string
    total_billed?: FloatFilter | number
    blockTime?: IntFilter | number
  }

  export type LogpowerupOrderByInput = {
    seq?: SortOrder
    txid?: SortOrder
    action?: SortOrder
    cost?: SortOrder
    fee?: SortOrder
    received_cpu_ms?: SortOrder
    received_net_kb?: SortOrder
    receiver?: SortOrder
    payer?: SortOrder
    total_billed?: SortOrder
    blockTime?: SortOrder
  }

  export type LogpowerupWhereUniqueInput = {
    seq?: number
  }

  export type LogpowerupScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LogpowerupScalarWhereWithAggregatesInput>
    OR?: Enumerable<LogpowerupScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LogpowerupScalarWhereWithAggregatesInput>
    seq?: IntWithAggregatesFilter | number
    txid?: StringWithAggregatesFilter | string
    action?: StringWithAggregatesFilter | string
    cost?: FloatWithAggregatesFilter | number
    fee?: FloatWithAggregatesFilter | number
    received_cpu_ms?: FloatWithAggregatesFilter | number
    received_net_kb?: FloatWithAggregatesFilter | number
    receiver?: StringWithAggregatesFilter | string
    payer?: StringWithAggregatesFilter | string
    total_billed?: FloatWithAggregatesFilter | number
    blockTime?: IntWithAggregatesFilter | number
  }

  export type LogbuyramWhereInput = {
    AND?: Enumerable<LogbuyramWhereInput>
    OR?: Enumerable<LogbuyramWhereInput>
    NOT?: Enumerable<LogbuyramWhereInput>
    seq?: IntFilter | number
    txid?: StringFilter | string
    action?: StringFilter | string
    cost?: FloatFilter | number
    fee?: FloatFilter | number
    received_ram_kb?: FloatFilter | number
    receiver?: StringFilter | string
    payer?: StringFilter | string
    total_billed?: FloatFilter | number
    blockTime?: IntFilter | number
  }

  export type LogbuyramOrderByInput = {
    seq?: SortOrder
    txid?: SortOrder
    action?: SortOrder
    cost?: SortOrder
    fee?: SortOrder
    received_ram_kb?: SortOrder
    receiver?: SortOrder
    payer?: SortOrder
    total_billed?: SortOrder
    blockTime?: SortOrder
  }

  export type LogbuyramWhereUniqueInput = {
    seq?: number
  }

  export type LogbuyramScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LogbuyramScalarWhereWithAggregatesInput>
    OR?: Enumerable<LogbuyramScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LogbuyramScalarWhereWithAggregatesInput>
    seq?: IntWithAggregatesFilter | number
    txid?: StringWithAggregatesFilter | string
    action?: StringWithAggregatesFilter | string
    cost?: FloatWithAggregatesFilter | number
    fee?: FloatWithAggregatesFilter | number
    received_ram_kb?: FloatWithAggregatesFilter | number
    receiver?: StringWithAggregatesFilter | string
    payer?: StringWithAggregatesFilter | string
    total_billed?: FloatWithAggregatesFilter | number
    blockTime?: IntWithAggregatesFilter | number
  }

  export type TransferWhereInput = {
    AND?: Enumerable<TransferWhereInput>
    OR?: Enumerable<TransferWhereInput>
    NOT?: Enumerable<TransferWhereInput>
    seq?: IntFilter | number
    from?: StringFilter | string
    to?: StringFilter | string
    quantity?: FloatFilter | number
    memo?: StringFilter | string
    symbol?: StringFilter | string
    txid?: StringFilter | string
    blockTime?: IntFilter | number
  }

  export type TransferOrderByInput = {
    seq?: SortOrder
    from?: SortOrder
    to?: SortOrder
    quantity?: SortOrder
    memo?: SortOrder
    symbol?: SortOrder
    txid?: SortOrder
    blockTime?: SortOrder
  }

  export type TransferWhereUniqueInput = {
    seq?: number
  }

  export type TransferScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TransferScalarWhereWithAggregatesInput>
    OR?: Enumerable<TransferScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TransferScalarWhereWithAggregatesInput>
    seq?: IntWithAggregatesFilter | number
    from?: StringWithAggregatesFilter | string
    to?: StringWithAggregatesFilter | string
    quantity?: FloatWithAggregatesFilter | number
    memo?: StringWithAggregatesFilter | string
    symbol?: StringWithAggregatesFilter | string
    txid?: StringWithAggregatesFilter | string
    blockTime?: IntWithAggregatesFilter | number
  }

  export type StatsWhereInput = {
    AND?: Enumerable<StatsWhereInput>
    OR?: Enumerable<StatsWhereInput>
    NOT?: Enumerable<StatsWhereInput>
    id?: StringFilter | string
    owners?: IntFilter | number
    totalWatched?: IntFilter | number
    totalDeposited?: FloatFilter | number
    internalEOSBal?: FloatFilter | number
    eosBal?: FloatFilter | number
    autopowerups24hr?: IntFilter | number
    autopowerupCost24hr?: FloatFilter | number
    autobuyram24hr?: IntFilter | number
    autopowerupfees24hr?: FloatFilter | number
    autobuyramfees24hr?: FloatFilter | number
    autobuyramCost24hr?: FloatFilter | number
    registeredUsersTotal?: IntFilter | number
    activeTgUsers?: IntFilter | number
    activeDiscordUsers?: IntFilter | number
    freePowerups24hr?: IntFilter | number
    freePowerupsCost24hr?: FloatFilter | number
    createdAt?: IntFilter | number
    rpcErrorStats?: StringFilter | string
  }

  export type StatsOrderByInput = {
    id?: SortOrder
    owners?: SortOrder
    totalWatched?: SortOrder
    totalDeposited?: SortOrder
    internalEOSBal?: SortOrder
    eosBal?: SortOrder
    autopowerups24hr?: SortOrder
    autopowerupCost24hr?: SortOrder
    autobuyram24hr?: SortOrder
    autopowerupfees24hr?: SortOrder
    autobuyramfees24hr?: SortOrder
    autobuyramCost24hr?: SortOrder
    registeredUsersTotal?: SortOrder
    activeTgUsers?: SortOrder
    activeDiscordUsers?: SortOrder
    freePowerups24hr?: SortOrder
    freePowerupsCost24hr?: SortOrder
    createdAt?: SortOrder
    rpcErrorStats?: SortOrder
  }

  export type StatsWhereUniqueInput = {
    id?: string
  }

  export type StatsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<StatsScalarWhereWithAggregatesInput>
    OR?: Enumerable<StatsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<StatsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    owners?: IntWithAggregatesFilter | number
    totalWatched?: IntWithAggregatesFilter | number
    totalDeposited?: FloatWithAggregatesFilter | number
    internalEOSBal?: FloatWithAggregatesFilter | number
    eosBal?: FloatWithAggregatesFilter | number
    autopowerups24hr?: IntWithAggregatesFilter | number
    autopowerupCost24hr?: FloatWithAggregatesFilter | number
    autobuyram24hr?: IntWithAggregatesFilter | number
    autopowerupfees24hr?: FloatWithAggregatesFilter | number
    autobuyramfees24hr?: FloatWithAggregatesFilter | number
    autobuyramCost24hr?: FloatWithAggregatesFilter | number
    registeredUsersTotal?: IntWithAggregatesFilter | number
    activeTgUsers?: IntWithAggregatesFilter | number
    activeDiscordUsers?: IntWithAggregatesFilter | number
    freePowerups24hr?: IntWithAggregatesFilter | number
    freePowerupsCost24hr?: FloatWithAggregatesFilter | number
    createdAt?: IntWithAggregatesFilter | number
    rpcErrorStats?: StringWithAggregatesFilter | string
  }

  export type rpcErrorsWhereInput = {
    AND?: Enumerable<rpcErrorsWhereInput>
    OR?: Enumerable<rpcErrorsWhereInput>
    NOT?: Enumerable<rpcErrorsWhereInput>
    id?: StringFilter | string
    time?: IntFilter | number
    endpoint?: StringFilter | string
    error?: StringFilter | string
  }

  export type rpcErrorsOrderByInput = {
    id?: SortOrder
    time?: SortOrder
    endpoint?: SortOrder
    error?: SortOrder
  }

  export type rpcErrorsWhereUniqueInput = {
    id?: string
  }

  export type rpcErrorsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<rpcErrorsScalarWhereWithAggregatesInput>
    OR?: Enumerable<rpcErrorsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<rpcErrorsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    time?: IntWithAggregatesFilter | number
    endpoint?: StringWithAggregatesFilter | string
    error?: StringWithAggregatesFilter | string
  }

  export type rpcSuccessWhereInput = {
    AND?: Enumerable<rpcSuccessWhereInput>
    OR?: Enumerable<rpcSuccessWhereInput>
    NOT?: Enumerable<rpcSuccessWhereInput>
    id?: StringFilter | string
    time?: IntFilter | number
    endpoint?: StringFilter | string
    error?: StringFilter | string
  }

  export type rpcSuccessOrderByInput = {
    id?: SortOrder
    time?: SortOrder
    endpoint?: SortOrder
    error?: SortOrder
  }

  export type rpcSuccessWhereUniqueInput = {
    id?: string
  }

  export type rpcSuccessScalarWhereWithAggregatesInput = {
    AND?: Enumerable<rpcSuccessScalarWhereWithAggregatesInput>
    OR?: Enumerable<rpcSuccessScalarWhereWithAggregatesInput>
    NOT?: Enumerable<rpcSuccessScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    time?: IntWithAggregatesFilter | number
    endpoint?: StringWithAggregatesFilter | string
    error?: StringWithAggregatesFilter | string
  }

  export type DopowerupCreateInput = {
    txid: string
    receiver: string
    payer: string
    cpu_frac: number
    net_frac: number
    time: number
    failed: boolean
    reversible: boolean
    User?: UserCreateNestedOneWithoutFreePowerupsInput
  }

  export type DopowerupUncheckedCreateInput = {
    txid: string
    receiver: string
    payer: string
    cpu_frac: number
    net_frac: number
    time: number
    failed: boolean
    reversible: boolean
    userId?: string | null
  }

  export type DopowerupUpdateInput = {
    txid?: StringFieldUpdateOperationsInput | string
    receiver?: StringFieldUpdateOperationsInput | string
    payer?: StringFieldUpdateOperationsInput | string
    cpu_frac?: IntFieldUpdateOperationsInput | number
    net_frac?: IntFieldUpdateOperationsInput | number
    time?: IntFieldUpdateOperationsInput | number
    failed?: BoolFieldUpdateOperationsInput | boolean
    reversible?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneWithoutFreePowerupsInput
  }

  export type DopowerupUncheckedUpdateInput = {
    txid?: StringFieldUpdateOperationsInput | string
    receiver?: StringFieldUpdateOperationsInput | string
    payer?: StringFieldUpdateOperationsInput | string
    cpu_frac?: IntFieldUpdateOperationsInput | number
    net_frac?: IntFieldUpdateOperationsInput | number
    time?: IntFieldUpdateOperationsInput | number
    failed?: BoolFieldUpdateOperationsInput | boolean
    reversible?: BoolFieldUpdateOperationsInput | boolean
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DopowerupUpdateManyMutationInput = {
    txid?: StringFieldUpdateOperationsInput | string
    receiver?: StringFieldUpdateOperationsInput | string
    payer?: StringFieldUpdateOperationsInput | string
    cpu_frac?: IntFieldUpdateOperationsInput | number
    net_frac?: IntFieldUpdateOperationsInput | number
    time?: IntFieldUpdateOperationsInput | number
    failed?: BoolFieldUpdateOperationsInput | boolean
    reversible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DopowerupUncheckedUpdateManyInput = {
    txid?: StringFieldUpdateOperationsInput | string
    receiver?: StringFieldUpdateOperationsInput | string
    payer?: StringFieldUpdateOperationsInput | string
    cpu_frac?: IntFieldUpdateOperationsInput | number
    net_frac?: IntFieldUpdateOperationsInput | number
    time?: IntFieldUpdateOperationsInput | number
    failed?: BoolFieldUpdateOperationsInput | boolean
    reversible?: BoolFieldUpdateOperationsInput | boolean
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateInput = {
    id?: string
    telegramId?: number | null
    telegramHandle?: string | null
    eosAccount?: string | null
    discordId?: string | null
    discordHandle?: string | null
    email?: string | null
    freePowerups?: DopowerupCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    telegramId?: number | null
    telegramHandle?: string | null
    eosAccount?: string | null
    discordId?: string | null
    discordHandle?: string | null
    email?: string | null
    freePowerups?: DopowerupUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    telegramId?: NullableIntFieldUpdateOperationsInput | number | null
    telegramHandle?: NullableStringFieldUpdateOperationsInput | string | null
    eosAccount?: NullableStringFieldUpdateOperationsInput | string | null
    discordId?: NullableStringFieldUpdateOperationsInput | string | null
    discordHandle?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    freePowerups?: DopowerupUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    telegramId?: NullableIntFieldUpdateOperationsInput | number | null
    telegramHandle?: NullableStringFieldUpdateOperationsInput | string | null
    eosAccount?: NullableStringFieldUpdateOperationsInput | string | null
    discordId?: NullableStringFieldUpdateOperationsInput | string | null
    discordHandle?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    freePowerups?: DopowerupUncheckedUpdateManyWithoutUserInput
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    telegramId?: NullableIntFieldUpdateOperationsInput | number | null
    telegramHandle?: NullableStringFieldUpdateOperationsInput | string | null
    eosAccount?: NullableStringFieldUpdateOperationsInput | string | null
    discordId?: NullableStringFieldUpdateOperationsInput | string | null
    discordHandle?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    telegramId?: NullableIntFieldUpdateOperationsInput | number | null
    telegramHandle?: NullableStringFieldUpdateOperationsInput | string | null
    eosAccount?: NullableStringFieldUpdateOperationsInput | string | null
    discordId?: NullableStringFieldUpdateOperationsInput | string | null
    discordHandle?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CursorCreateInput = {
    searchString: string
    cursor: string
    lowBlock: number
  }

  export type CursorUncheckedCreateInput = {
    searchString: string
    cursor: string
    lowBlock: number
  }

  export type CursorUpdateInput = {
    searchString?: StringFieldUpdateOperationsInput | string
    cursor?: StringFieldUpdateOperationsInput | string
    lowBlock?: IntFieldUpdateOperationsInput | number
  }

  export type CursorUncheckedUpdateInput = {
    searchString?: StringFieldUpdateOperationsInput | string
    cursor?: StringFieldUpdateOperationsInput | string
    lowBlock?: IntFieldUpdateOperationsInput | number
  }

  export type CursorUpdateManyMutationInput = {
    searchString?: StringFieldUpdateOperationsInput | string
    cursor?: StringFieldUpdateOperationsInput | string
    lowBlock?: IntFieldUpdateOperationsInput | number
  }

  export type CursorUncheckedUpdateManyInput = {
    searchString?: StringFieldUpdateOperationsInput | string
    cursor?: StringFieldUpdateOperationsInput | string
    lowBlock?: IntFieldUpdateOperationsInput | number
  }

  export type ipblacklistCreateInput = {
    ip: string
    reason: string
  }

  export type ipblacklistUncheckedCreateInput = {
    ip: string
    reason: string
  }

  export type ipblacklistUpdateInput = {
    ip?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type ipblacklistUncheckedUpdateInput = {
    ip?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type ipblacklistUpdateManyMutationInput = {
    ip?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type ipblacklistUncheckedUpdateManyInput = {
    ip?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type blacklistCreateInput = {
    account: string
    reason: string
  }

  export type blacklistUncheckedCreateInput = {
    account: string
    reason: string
  }

  export type blacklistUpdateInput = {
    account?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type blacklistUncheckedUpdateInput = {
    account?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type blacklistUpdateManyMutationInput = {
    account?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type blacklistUncheckedUpdateManyInput = {
    account?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type LogpowerupCreateInput = {
    seq: number
    txid: string
    action: string
    cost: number
    fee: number
    received_cpu_ms: number
    received_net_kb: number
    receiver: string
    payer: string
    total_billed: number
    blockTime: number
  }

  export type LogpowerupUncheckedCreateInput = {
    seq: number
    txid: string
    action: string
    cost: number
    fee: number
    received_cpu_ms: number
    received_net_kb: number
    receiver: string
    payer: string
    total_billed: number
    blockTime: number
  }

  export type LogpowerupUpdateInput = {
    seq?: IntFieldUpdateOperationsInput | number
    txid?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    fee?: FloatFieldUpdateOperationsInput | number
    received_cpu_ms?: FloatFieldUpdateOperationsInput | number
    received_net_kb?: FloatFieldUpdateOperationsInput | number
    receiver?: StringFieldUpdateOperationsInput | string
    payer?: StringFieldUpdateOperationsInput | string
    total_billed?: FloatFieldUpdateOperationsInput | number
    blockTime?: IntFieldUpdateOperationsInput | number
  }

  export type LogpowerupUncheckedUpdateInput = {
    seq?: IntFieldUpdateOperationsInput | number
    txid?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    fee?: FloatFieldUpdateOperationsInput | number
    received_cpu_ms?: FloatFieldUpdateOperationsInput | number
    received_net_kb?: FloatFieldUpdateOperationsInput | number
    receiver?: StringFieldUpdateOperationsInput | string
    payer?: StringFieldUpdateOperationsInput | string
    total_billed?: FloatFieldUpdateOperationsInput | number
    blockTime?: IntFieldUpdateOperationsInput | number
  }

  export type LogpowerupUpdateManyMutationInput = {
    seq?: IntFieldUpdateOperationsInput | number
    txid?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    fee?: FloatFieldUpdateOperationsInput | number
    received_cpu_ms?: FloatFieldUpdateOperationsInput | number
    received_net_kb?: FloatFieldUpdateOperationsInput | number
    receiver?: StringFieldUpdateOperationsInput | string
    payer?: StringFieldUpdateOperationsInput | string
    total_billed?: FloatFieldUpdateOperationsInput | number
    blockTime?: IntFieldUpdateOperationsInput | number
  }

  export type LogpowerupUncheckedUpdateManyInput = {
    seq?: IntFieldUpdateOperationsInput | number
    txid?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    fee?: FloatFieldUpdateOperationsInput | number
    received_cpu_ms?: FloatFieldUpdateOperationsInput | number
    received_net_kb?: FloatFieldUpdateOperationsInput | number
    receiver?: StringFieldUpdateOperationsInput | string
    payer?: StringFieldUpdateOperationsInput | string
    total_billed?: FloatFieldUpdateOperationsInput | number
    blockTime?: IntFieldUpdateOperationsInput | number
  }

  export type LogbuyramCreateInput = {
    seq: number
    txid: string
    action: string
    cost: number
    fee: number
    received_ram_kb: number
    receiver: string
    payer: string
    total_billed: number
    blockTime: number
  }

  export type LogbuyramUncheckedCreateInput = {
    seq: number
    txid: string
    action: string
    cost: number
    fee: number
    received_ram_kb: number
    receiver: string
    payer: string
    total_billed: number
    blockTime: number
  }

  export type LogbuyramUpdateInput = {
    seq?: IntFieldUpdateOperationsInput | number
    txid?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    fee?: FloatFieldUpdateOperationsInput | number
    received_ram_kb?: FloatFieldUpdateOperationsInput | number
    receiver?: StringFieldUpdateOperationsInput | string
    payer?: StringFieldUpdateOperationsInput | string
    total_billed?: FloatFieldUpdateOperationsInput | number
    blockTime?: IntFieldUpdateOperationsInput | number
  }

  export type LogbuyramUncheckedUpdateInput = {
    seq?: IntFieldUpdateOperationsInput | number
    txid?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    fee?: FloatFieldUpdateOperationsInput | number
    received_ram_kb?: FloatFieldUpdateOperationsInput | number
    receiver?: StringFieldUpdateOperationsInput | string
    payer?: StringFieldUpdateOperationsInput | string
    total_billed?: FloatFieldUpdateOperationsInput | number
    blockTime?: IntFieldUpdateOperationsInput | number
  }

  export type LogbuyramUpdateManyMutationInput = {
    seq?: IntFieldUpdateOperationsInput | number
    txid?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    fee?: FloatFieldUpdateOperationsInput | number
    received_ram_kb?: FloatFieldUpdateOperationsInput | number
    receiver?: StringFieldUpdateOperationsInput | string
    payer?: StringFieldUpdateOperationsInput | string
    total_billed?: FloatFieldUpdateOperationsInput | number
    blockTime?: IntFieldUpdateOperationsInput | number
  }

  export type LogbuyramUncheckedUpdateManyInput = {
    seq?: IntFieldUpdateOperationsInput | number
    txid?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    fee?: FloatFieldUpdateOperationsInput | number
    received_ram_kb?: FloatFieldUpdateOperationsInput | number
    receiver?: StringFieldUpdateOperationsInput | string
    payer?: StringFieldUpdateOperationsInput | string
    total_billed?: FloatFieldUpdateOperationsInput | number
    blockTime?: IntFieldUpdateOperationsInput | number
  }

  export type TransferCreateInput = {
    seq: number
    from: string
    to: string
    quantity: number
    memo: string
    symbol: string
    txid: string
    blockTime: number
  }

  export type TransferUncheckedCreateInput = {
    seq: number
    from: string
    to: string
    quantity: number
    memo: string
    symbol: string
    txid: string
    blockTime: number
  }

  export type TransferUpdateInput = {
    seq?: IntFieldUpdateOperationsInput | number
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    memo?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    txid?: StringFieldUpdateOperationsInput | string
    blockTime?: IntFieldUpdateOperationsInput | number
  }

  export type TransferUncheckedUpdateInput = {
    seq?: IntFieldUpdateOperationsInput | number
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    memo?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    txid?: StringFieldUpdateOperationsInput | string
    blockTime?: IntFieldUpdateOperationsInput | number
  }

  export type TransferUpdateManyMutationInput = {
    seq?: IntFieldUpdateOperationsInput | number
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    memo?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    txid?: StringFieldUpdateOperationsInput | string
    blockTime?: IntFieldUpdateOperationsInput | number
  }

  export type TransferUncheckedUpdateManyInput = {
    seq?: IntFieldUpdateOperationsInput | number
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    memo?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    txid?: StringFieldUpdateOperationsInput | string
    blockTime?: IntFieldUpdateOperationsInput | number
  }

  export type StatsCreateInput = {
    id?: string
    owners: number
    totalWatched: number
    totalDeposited: number
    internalEOSBal?: number
    eosBal?: number
    autopowerups24hr?: number
    autopowerupCost24hr?: number
    autobuyram24hr?: number
    autopowerupfees24hr?: number
    autobuyramfees24hr?: number
    autobuyramCost24hr?: number
    registeredUsersTotal?: number
    activeTgUsers?: number
    activeDiscordUsers?: number
    freePowerups24hr?: number
    freePowerupsCost24hr?: number
    createdAt: number
    rpcErrorStats?: string
  }

  export type StatsUncheckedCreateInput = {
    id?: string
    owners: number
    totalWatched: number
    totalDeposited: number
    internalEOSBal?: number
    eosBal?: number
    autopowerups24hr?: number
    autopowerupCost24hr?: number
    autobuyram24hr?: number
    autopowerupfees24hr?: number
    autobuyramfees24hr?: number
    autobuyramCost24hr?: number
    registeredUsersTotal?: number
    activeTgUsers?: number
    activeDiscordUsers?: number
    freePowerups24hr?: number
    freePowerupsCost24hr?: number
    createdAt: number
    rpcErrorStats?: string
  }

  export type StatsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    owners?: IntFieldUpdateOperationsInput | number
    totalWatched?: IntFieldUpdateOperationsInput | number
    totalDeposited?: FloatFieldUpdateOperationsInput | number
    internalEOSBal?: FloatFieldUpdateOperationsInput | number
    eosBal?: FloatFieldUpdateOperationsInput | number
    autopowerups24hr?: IntFieldUpdateOperationsInput | number
    autopowerupCost24hr?: FloatFieldUpdateOperationsInput | number
    autobuyram24hr?: IntFieldUpdateOperationsInput | number
    autopowerupfees24hr?: FloatFieldUpdateOperationsInput | number
    autobuyramfees24hr?: FloatFieldUpdateOperationsInput | number
    autobuyramCost24hr?: FloatFieldUpdateOperationsInput | number
    registeredUsersTotal?: IntFieldUpdateOperationsInput | number
    activeTgUsers?: IntFieldUpdateOperationsInput | number
    activeDiscordUsers?: IntFieldUpdateOperationsInput | number
    freePowerups24hr?: IntFieldUpdateOperationsInput | number
    freePowerupsCost24hr?: FloatFieldUpdateOperationsInput | number
    createdAt?: IntFieldUpdateOperationsInput | number
    rpcErrorStats?: StringFieldUpdateOperationsInput | string
  }

  export type StatsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    owners?: IntFieldUpdateOperationsInput | number
    totalWatched?: IntFieldUpdateOperationsInput | number
    totalDeposited?: FloatFieldUpdateOperationsInput | number
    internalEOSBal?: FloatFieldUpdateOperationsInput | number
    eosBal?: FloatFieldUpdateOperationsInput | number
    autopowerups24hr?: IntFieldUpdateOperationsInput | number
    autopowerupCost24hr?: FloatFieldUpdateOperationsInput | number
    autobuyram24hr?: IntFieldUpdateOperationsInput | number
    autopowerupfees24hr?: FloatFieldUpdateOperationsInput | number
    autobuyramfees24hr?: FloatFieldUpdateOperationsInput | number
    autobuyramCost24hr?: FloatFieldUpdateOperationsInput | number
    registeredUsersTotal?: IntFieldUpdateOperationsInput | number
    activeTgUsers?: IntFieldUpdateOperationsInput | number
    activeDiscordUsers?: IntFieldUpdateOperationsInput | number
    freePowerups24hr?: IntFieldUpdateOperationsInput | number
    freePowerupsCost24hr?: FloatFieldUpdateOperationsInput | number
    createdAt?: IntFieldUpdateOperationsInput | number
    rpcErrorStats?: StringFieldUpdateOperationsInput | string
  }

  export type StatsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    owners?: IntFieldUpdateOperationsInput | number
    totalWatched?: IntFieldUpdateOperationsInput | number
    totalDeposited?: FloatFieldUpdateOperationsInput | number
    internalEOSBal?: FloatFieldUpdateOperationsInput | number
    eosBal?: FloatFieldUpdateOperationsInput | number
    autopowerups24hr?: IntFieldUpdateOperationsInput | number
    autopowerupCost24hr?: FloatFieldUpdateOperationsInput | number
    autobuyram24hr?: IntFieldUpdateOperationsInput | number
    autopowerupfees24hr?: FloatFieldUpdateOperationsInput | number
    autobuyramfees24hr?: FloatFieldUpdateOperationsInput | number
    autobuyramCost24hr?: FloatFieldUpdateOperationsInput | number
    registeredUsersTotal?: IntFieldUpdateOperationsInput | number
    activeTgUsers?: IntFieldUpdateOperationsInput | number
    activeDiscordUsers?: IntFieldUpdateOperationsInput | number
    freePowerups24hr?: IntFieldUpdateOperationsInput | number
    freePowerupsCost24hr?: FloatFieldUpdateOperationsInput | number
    createdAt?: IntFieldUpdateOperationsInput | number
    rpcErrorStats?: StringFieldUpdateOperationsInput | string
  }

  export type StatsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    owners?: IntFieldUpdateOperationsInput | number
    totalWatched?: IntFieldUpdateOperationsInput | number
    totalDeposited?: FloatFieldUpdateOperationsInput | number
    internalEOSBal?: FloatFieldUpdateOperationsInput | number
    eosBal?: FloatFieldUpdateOperationsInput | number
    autopowerups24hr?: IntFieldUpdateOperationsInput | number
    autopowerupCost24hr?: FloatFieldUpdateOperationsInput | number
    autobuyram24hr?: IntFieldUpdateOperationsInput | number
    autopowerupfees24hr?: FloatFieldUpdateOperationsInput | number
    autobuyramfees24hr?: FloatFieldUpdateOperationsInput | number
    autobuyramCost24hr?: FloatFieldUpdateOperationsInput | number
    registeredUsersTotal?: IntFieldUpdateOperationsInput | number
    activeTgUsers?: IntFieldUpdateOperationsInput | number
    activeDiscordUsers?: IntFieldUpdateOperationsInput | number
    freePowerups24hr?: IntFieldUpdateOperationsInput | number
    freePowerupsCost24hr?: FloatFieldUpdateOperationsInput | number
    createdAt?: IntFieldUpdateOperationsInput | number
    rpcErrorStats?: StringFieldUpdateOperationsInput | string
  }

  export type rpcErrorsCreateInput = {
    id?: string
    time: number
    endpoint: string
    error: string
  }

  export type rpcErrorsUncheckedCreateInput = {
    id?: string
    time: number
    endpoint: string
    error: string
  }

  export type rpcErrorsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    time?: IntFieldUpdateOperationsInput | number
    endpoint?: StringFieldUpdateOperationsInput | string
    error?: StringFieldUpdateOperationsInput | string
  }

  export type rpcErrorsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    time?: IntFieldUpdateOperationsInput | number
    endpoint?: StringFieldUpdateOperationsInput | string
    error?: StringFieldUpdateOperationsInput | string
  }

  export type rpcErrorsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    time?: IntFieldUpdateOperationsInput | number
    endpoint?: StringFieldUpdateOperationsInput | string
    error?: StringFieldUpdateOperationsInput | string
  }

  export type rpcErrorsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    time?: IntFieldUpdateOperationsInput | number
    endpoint?: StringFieldUpdateOperationsInput | string
    error?: StringFieldUpdateOperationsInput | string
  }

  export type rpcSuccessCreateInput = {
    id?: string
    time: number
    endpoint: string
    error: string
  }

  export type rpcSuccessUncheckedCreateInput = {
    id?: string
    time: number
    endpoint: string
    error: string
  }

  export type rpcSuccessUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    time?: IntFieldUpdateOperationsInput | number
    endpoint?: StringFieldUpdateOperationsInput | string
    error?: StringFieldUpdateOperationsInput | string
  }

  export type rpcSuccessUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    time?: IntFieldUpdateOperationsInput | number
    endpoint?: StringFieldUpdateOperationsInput | string
    error?: StringFieldUpdateOperationsInput | string
  }

  export type rpcSuccessUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    time?: IntFieldUpdateOperationsInput | number
    endpoint?: StringFieldUpdateOperationsInput | string
    error?: StringFieldUpdateOperationsInput | string
  }

  export type rpcSuccessUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    time?: IntFieldUpdateOperationsInput | number
    endpoint?: StringFieldUpdateOperationsInput | string
    error?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type UserRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedBoolFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedBoolFilter
    _max?: NestedBoolFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedBoolFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringNullableFilter
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type DopowerupListRelationFilter = {
    every?: DopowerupWhereInput
    some?: DopowerupWhereInput
    none?: DopowerupWhereInput
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntNullableFilter
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedFloatFilter
    _max?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedFloatFilter
  }

  export type UserCreateNestedOneWithoutFreePowerupsInput = {
    create?: XOR<UserCreateWithoutFreePowerupsInput, UserUncheckedCreateWithoutFreePowerupsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFreePowerupsInput
    connect?: UserWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneWithoutFreePowerupsInput = {
    create?: XOR<UserCreateWithoutFreePowerupsInput, UserUncheckedCreateWithoutFreePowerupsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFreePowerupsInput
    upsert?: UserUpsertWithoutFreePowerupsInput
    connect?: UserWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<UserUpdateWithoutFreePowerupsInput, UserUncheckedUpdateWithoutFreePowerupsInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DopowerupCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<DopowerupCreateWithoutUserInput>, Enumerable<DopowerupUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<DopowerupCreateOrConnectWithoutUserInput>
    connect?: Enumerable<DopowerupWhereUniqueInput>
  }

  export type DopowerupUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<DopowerupCreateWithoutUserInput>, Enumerable<DopowerupUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<DopowerupCreateOrConnectWithoutUserInput>
    connect?: Enumerable<DopowerupWhereUniqueInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DopowerupUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<DopowerupCreateWithoutUserInput>, Enumerable<DopowerupUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<DopowerupCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<DopowerupUpsertWithWhereUniqueWithoutUserInput>
    connect?: Enumerable<DopowerupWhereUniqueInput>
    set?: Enumerable<DopowerupWhereUniqueInput>
    disconnect?: Enumerable<DopowerupWhereUniqueInput>
    delete?: Enumerable<DopowerupWhereUniqueInput>
    update?: Enumerable<DopowerupUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<DopowerupUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<DopowerupScalarWhereInput>
  }

  export type DopowerupUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<DopowerupCreateWithoutUserInput>, Enumerable<DopowerupUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<DopowerupCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<DopowerupUpsertWithWhereUniqueWithoutUserInput>
    connect?: Enumerable<DopowerupWhereUniqueInput>
    set?: Enumerable<DopowerupWhereUniqueInput>
    disconnect?: Enumerable<DopowerupWhereUniqueInput>
    delete?: Enumerable<DopowerupWhereUniqueInput>
    update?: Enumerable<DopowerupUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<DopowerupUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<DopowerupScalarWhereInput>
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedBoolFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedBoolFilter
    _max?: NestedBoolFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedBoolFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedFloatFilter
    _max?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedFloatFilter
  }

  export type UserCreateWithoutFreePowerupsInput = {
    id?: string
    telegramId?: number | null
    telegramHandle?: string | null
    eosAccount?: string | null
    discordId?: string | null
    discordHandle?: string | null
    email?: string | null
  }

  export type UserUncheckedCreateWithoutFreePowerupsInput = {
    id?: string
    telegramId?: number | null
    telegramHandle?: string | null
    eosAccount?: string | null
    discordId?: string | null
    discordHandle?: string | null
    email?: string | null
  }

  export type UserCreateOrConnectWithoutFreePowerupsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFreePowerupsInput, UserUncheckedCreateWithoutFreePowerupsInput>
  }

  export type UserUpsertWithoutFreePowerupsInput = {
    update: XOR<UserUpdateWithoutFreePowerupsInput, UserUncheckedUpdateWithoutFreePowerupsInput>
    create: XOR<UserCreateWithoutFreePowerupsInput, UserUncheckedCreateWithoutFreePowerupsInput>
  }

  export type UserUpdateWithoutFreePowerupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    telegramId?: NullableIntFieldUpdateOperationsInput | number | null
    telegramHandle?: NullableStringFieldUpdateOperationsInput | string | null
    eosAccount?: NullableStringFieldUpdateOperationsInput | string | null
    discordId?: NullableStringFieldUpdateOperationsInput | string | null
    discordHandle?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateWithoutFreePowerupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    telegramId?: NullableIntFieldUpdateOperationsInput | number | null
    telegramHandle?: NullableStringFieldUpdateOperationsInput | string | null
    eosAccount?: NullableStringFieldUpdateOperationsInput | string | null
    discordId?: NullableStringFieldUpdateOperationsInput | string | null
    discordHandle?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DopowerupCreateWithoutUserInput = {
    txid: string
    receiver: string
    payer: string
    cpu_frac: number
    net_frac: number
    time: number
    failed: boolean
    reversible: boolean
  }

  export type DopowerupUncheckedCreateWithoutUserInput = {
    txid: string
    receiver: string
    payer: string
    cpu_frac: number
    net_frac: number
    time: number
    failed: boolean
    reversible: boolean
  }

  export type DopowerupCreateOrConnectWithoutUserInput = {
    where: DopowerupWhereUniqueInput
    create: XOR<DopowerupCreateWithoutUserInput, DopowerupUncheckedCreateWithoutUserInput>
  }

  export type DopowerupUpsertWithWhereUniqueWithoutUserInput = {
    where: DopowerupWhereUniqueInput
    update: XOR<DopowerupUpdateWithoutUserInput, DopowerupUncheckedUpdateWithoutUserInput>
    create: XOR<DopowerupCreateWithoutUserInput, DopowerupUncheckedCreateWithoutUserInput>
  }

  export type DopowerupUpdateWithWhereUniqueWithoutUserInput = {
    where: DopowerupWhereUniqueInput
    data: XOR<DopowerupUpdateWithoutUserInput, DopowerupUncheckedUpdateWithoutUserInput>
  }

  export type DopowerupUpdateManyWithWhereWithoutUserInput = {
    where: DopowerupScalarWhereInput
    data: XOR<DopowerupUpdateManyMutationInput, DopowerupUncheckedUpdateManyWithoutFreePowerupsInput>
  }

  export type DopowerupScalarWhereInput = {
    AND?: Enumerable<DopowerupScalarWhereInput>
    OR?: Enumerable<DopowerupScalarWhereInput>
    NOT?: Enumerable<DopowerupScalarWhereInput>
    txid?: StringFilter | string
    receiver?: StringFilter | string
    payer?: StringFilter | string
    cpu_frac?: IntFilter | number
    net_frac?: IntFilter | number
    time?: IntFilter | number
    failed?: BoolFilter | boolean
    reversible?: BoolFilter | boolean
    userId?: StringNullableFilter | string | null
  }

  export type DopowerupUpdateWithoutUserInput = {
    txid?: StringFieldUpdateOperationsInput | string
    receiver?: StringFieldUpdateOperationsInput | string
    payer?: StringFieldUpdateOperationsInput | string
    cpu_frac?: IntFieldUpdateOperationsInput | number
    net_frac?: IntFieldUpdateOperationsInput | number
    time?: IntFieldUpdateOperationsInput | number
    failed?: BoolFieldUpdateOperationsInput | boolean
    reversible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DopowerupUncheckedUpdateWithoutUserInput = {
    txid?: StringFieldUpdateOperationsInput | string
    receiver?: StringFieldUpdateOperationsInput | string
    payer?: StringFieldUpdateOperationsInput | string
    cpu_frac?: IntFieldUpdateOperationsInput | number
    net_frac?: IntFieldUpdateOperationsInput | number
    time?: IntFieldUpdateOperationsInput | number
    failed?: BoolFieldUpdateOperationsInput | boolean
    reversible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DopowerupUncheckedUpdateManyWithoutFreePowerupsInput = {
    txid?: StringFieldUpdateOperationsInput | string
    receiver?: StringFieldUpdateOperationsInput | string
    payer?: StringFieldUpdateOperationsInput | string
    cpu_frac?: IntFieldUpdateOperationsInput | number
    net_frac?: IntFieldUpdateOperationsInput | number
    time?: IntFieldUpdateOperationsInput | number
    failed?: BoolFieldUpdateOperationsInput | boolean
    reversible?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}